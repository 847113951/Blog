/*
 Navicat Premium Data Transfer

 Source Server         : ydw
 Source Server Type    : MySQL
 Source Server Version : 50559
 Source Host           : localhost:3306
 Source Schema         : blog

 Target Server Type    : MySQL
 Target Server Version : 50559
 File Encoding         : 65001

 Date: 17/08/2020 21:14:12
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for blog_tag
-- ----------------------------
DROP TABLE IF EXISTS `blog_tag`;
CREATE TABLE `blog_tag`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `blog_id` bigint(20) NOT NULL,
  `tag_id` bigint(20) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `FK_bt_blog`(`blog_id`) USING BTREE,
  INDEX `FK_bt_tag`(`tag_id`) USING BTREE,
  CONSTRAINT `FK_bt_blog` FOREIGN KEY (`blog_id`) REFERENCES `t_blog` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `FK_bt_tag` FOREIGN KEY (`tag_id`) REFERENCES `t_tag` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 111 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of blog_tag
-- ----------------------------
INSERT INTO `blog_tag` VALUES (90, 35, 1);
INSERT INTO `blog_tag` VALUES (91, 35, 2);
INSERT INTO `blog_tag` VALUES (92, 35, 3);
INSERT INTO `blog_tag` VALUES (93, 35, 4);
INSERT INTO `blog_tag` VALUES (94, 36, 2);
INSERT INTO `blog_tag` VALUES (95, 37, 2);
INSERT INTO `blog_tag` VALUES (96, 37, 3);
INSERT INTO `blog_tag` VALUES (97, 37, 14);
INSERT INTO `blog_tag` VALUES (98, 38, 15);
INSERT INTO `blog_tag` VALUES (101, 39, 1);
INSERT INTO `blog_tag` VALUES (102, 39, 2);
INSERT INTO `blog_tag` VALUES (107, 40, 1);
INSERT INTO `blog_tag` VALUES (108, 40, 2);
INSERT INTO `blog_tag` VALUES (109, 40, 4);
INSERT INTO `blog_tag` VALUES (110, 40, 14);

-- ----------------------------
-- Table structure for t_blog
-- ----------------------------
DROP TABLE IF EXISTS `t_blog`;
CREATE TABLE `t_blog`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `title` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '标题',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '博客内容',
  `first_picture` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '首图',
  `flag` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '转载还是原创 1原创 0转载',
  `views` int(11) NULL DEFAULT NULL COMMENT '浏览次数',
  `apprecation` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '赞赏是否开启 1 开启 0未开启',
  `share_statement` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '转载声明是否开启 1开启 0未开启',
  `commentabled` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '评论是否开启 1开启 0 未开启',
  `published` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '博客是否发布，还是保存为草稿 1发布 0不发布',
  `recommened` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '该博客是否推荐 1推荐 0 不推荐',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `type_id` bigint(20) NULL DEFAULT NULL COMMENT '与type表的外键关联id',
  `user_id` bigint(20) NULL DEFAULT NULL COMMENT '与user表的外键关联id',
  `description` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '对博客的简述',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `FK_blog_type`(`type_id`) USING BTREE,
  INDEX `FK_blog_user`(`user_id`) USING BTREE,
  CONSTRAINT `FK_blog_type` FOREIGN KEY (`type_id`) REFERENCES `t_type` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `FK_blog_user` FOREIGN KEY (`user_id`) REFERENCES `t_user` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 41 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of t_blog
-- ----------------------------
INSERT INTO `t_blog` VALUES (35, 'SpringBoot笔记', '# 一、Spring Boot 入门\r\n\r\n## 1、Spring Boot 简介\r\n\r\n> 简化Spring应用开发的一个框架；\r\n>\r\n> 整个Spring技术栈的一个大整合；\r\n>\r\n> J2EE开发的一站式解决方案；\r\n\r\n## 2、微服务\r\n\r\n2014，martin fowler\r\n\r\n微服务：架构风格（服务微化）\r\n\r\n一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；\r\n\r\n单体应用：ALL IN ONE\r\n\r\n微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；\r\n\r\n[详细参照微服务文档](https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa)\r\n\r\n\r\n\r\n## 3、环境准备\r\n\r\nhttp://www.gulixueyuan.com/ 谷粒学院\r\n\r\n环境约束\r\n\r\n–jdk1.8：Spring Boot 推荐jdk1.7及以上；java version \"1.8.0_112\"\r\n\r\n–maven3.x：maven 3.3以上版本；Apache Maven 3.3.9\r\n\r\n–IntelliJIDEA2017：IntelliJ IDEA 2017.2.2 x64、STS\r\n\r\n–SpringBoot 1.5.9.RELEASE：1.5.9；\r\n\r\n统一环境；\r\n\r\n\r\n\r\n### 1、MAVEN设置；\r\n\r\n给maven 的settings.xml配置文件的profiles标签添加\r\n\r\n```xml\r\n<profile>\r\n  <id>jdk-1.8</id>\r\n  <activation>\r\n    <activeByDefault>true</activeByDefault>\r\n    <jdk>1.8</jdk>\r\n  </activation>\r\n  <properties>\r\n    <maven.compiler.source>1.8</maven.compiler.source>\r\n    <maven.compiler.target>1.8</maven.compiler.target>\r\n    <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>\r\n  </properties>\r\n</profile>\r\n```\r\n\r\n### 2、IDEA设置\r\n\r\n整合maven进来；\r\n\r\n![idea设置](images/搜狗截图20180129151045.png)\r\n\r\n\r\n\r\n![images/](images/搜狗截图20180129151112.png)\r\n\r\n## 4、Spring Boot HelloWorld\r\n\r\n一个功能：\r\n\r\n浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；\r\n\r\n\r\n\r\n### 1、创建一个maven工程；（jar）\r\n\r\n### 2、导入spring boot相关的依赖\r\n\r\n```xml\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>1.5.9.RELEASE</version>\r\n    </parent>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n    </dependencies>\r\n```\r\n\r\n### 3、编写一个主程序；启动Spring Boot应用\r\n\r\n```java\r\n\r\n/**\r\n *  @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用\r\n */\r\n@SpringBootApplication\r\npublic class HelloWorldMainApplication {\r\n\r\n    public static void main(String[] args) {\r\n\r\n        // Spring应用启动起来\r\n        SpringApplication.run(HelloWorldMainApplication.class,args);\r\n    }\r\n}\r\n```\r\n\r\n### 4、编写相关的Controller、Service\r\n\r\n```java\r\n@Controller\r\npublic class HelloController {\r\n\r\n    @ResponseBody\r\n    @RequestMapping(\"/hello\")\r\n    public String hello(){\r\n        return \"Hello World!\";\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n### 5、运行主程序测试\r\n\r\n### 6、简化部署\r\n\r\n```xml\r\n <!-- 这个插件，可以将应用打包成一个可执行的jar包；-->\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n```\r\n\r\n将这个应用打成jar包，直接使用java -jar的命令进行执行；\r\n\r\n## 5、Hello World探究\r\n\r\n### 1、POM文件\r\n\r\n#### 1、父项目\r\n\r\n```xml\r\n<parent>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-parent</artifactId>\r\n    <version>1.5.9.RELEASE</version>\r\n</parent>\r\n\r\n他的父项目是\r\n<parent>\r\n  <groupId>org.springframework.boot</groupId>\r\n  <artifactId>spring-boot-dependencies</artifactId>\r\n  <version>1.5.9.RELEASE</version>\r\n  <relativePath>../../spring-boot-dependencies</relativePath>\r\n</parent>\r\n他来真正管理Spring Boot应用里面的所有依赖版本；\r\n\r\n```\r\n\r\nSpring Boot的版本仲裁中心；\r\n\r\n以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）\r\n\r\n#### 2、启动器\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n**spring-boot-starter**-==web==：\r\n\r\n​	spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；\r\n\r\n\r\n\r\nSpring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器\r\n\r\n\r\n\r\n### 2、主程序类，主入口类\r\n\r\n```java\r\n/**\r\n *  @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用\r\n */\r\n@SpringBootApplication\r\npublic class HelloWorldMainApplication {\r\n\r\n    public static void main(String[] args) {\r\n\r\n        // Spring应用启动起来\r\n        SpringApplication.run(HelloWorldMainApplication.class,args);\r\n    }\r\n}\r\n\r\n```\r\n\r\n@**SpringBootApplication**:    Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；\r\n\r\n\r\n\r\n```java\r\n@Target(ElementType.TYPE)\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Documented\r\n@Inherited\r\n@SpringBootConfiguration\r\n@EnableAutoConfiguration\r\n@ComponentScan(excludeFilters = {\r\n      @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),\r\n      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })\r\npublic @interface SpringBootApplication {\r\n```\r\n\r\n@**SpringBootConfiguration**:Spring Boot的配置类；\r\n\r\n​		标注在某个类上，表示这是一个Spring Boot的配置类；\r\n\r\n​		@**Configuration**:配置类上来标注这个注解；\r\n\r\n​			配置类 -----  配置文件；配置类也是容器中的一个组件；@Component\r\n\r\n\r\n\r\n@**EnableAutoConfiguration**：开启自动配置功能；\r\n\r\n​		以前我们需要配置的东西，Spring Boot帮我们自动配置；@**EnableAutoConfiguration**告诉SpringBoot开启自动配置功能；这样自动配置才能生效；\r\n\r\n```java\r\n@AutoConfigurationPackage\r\n@Import(EnableAutoConfigurationImportSelector.class)\r\npublic @interface EnableAutoConfiguration {\r\n```\r\n\r\n​      	@**AutoConfigurationPackage**：自动配置包\r\n\r\n​		@**Import**(AutoConfigurationPackages.Registrar.class)：\r\n\r\n​		Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；\r\n\r\n==将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；==\r\n\r\n​	@**Import**(EnableAutoConfigurationImportSelector.class)；\r\n\r\n​		给容器中导入组件？\r\n\r\n​		**EnableAutoConfigurationImportSelector**：导入哪些组件的选择器；\r\n\r\n​		将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；\r\n\r\n​		会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；		![自动配置类](images/搜狗截图20180129224104.png)\r\n\r\n有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；\r\n\r\n​		SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；\r\n\r\n\r\n\r\n==Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；==以前我们需要自己配置的东西，自动配置类都帮我们；\r\n\r\nJ2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar；\r\n\r\n\r\n\r\n​		\r\n\r\n==Spring注解版（谷粒学院）==\r\n\r\n\r\n\r\n## 6、使用Spring Initializer快速创建Spring Boot项目\r\n\r\n### 1、IDEA：使用 Spring Initializer快速创建项目\r\n\r\nIDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；\r\n\r\n选择我们需要的模块；向导会联网创建Spring Boot项目；\r\n\r\n默认生成的Spring Boot项目；\r\n\r\n- 主程序已经生成好了，我们只需要我们自己的逻辑\r\n- resources文件夹中目录结构\r\n  - static：保存所有的静态资源； js css  images；\r\n  - templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）；\r\n  - application.properties：Spring Boot应用的配置文件；可以修改一些默认设置；\r\n\r\n### 2、STS使用 Spring Starter Project快速创建项目\r\n\r\n\r\n\r\n-------------\r\n\r\n\r\n\r\n# 二、配置文件\r\n\r\n## 1、配置文件\r\n\r\nSpringBoot使用一个全局的配置文件，配置文件名是固定的；\r\n\r\n•application.properties\r\n\r\n•application.yml\r\n\r\n\r\n\r\n配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好；\r\n\r\n\r\n\r\nYAML（YAML Ain\'t Markup Language）\r\n\r\n​	YAML  A Markup Language：是一个标记语言\r\n\r\n​	YAML   isn\'t Markup Language：不是一个标记语言；\r\n\r\n标记语言：\r\n\r\n​	以前的配置文件；大多都使用的是  **xxxx.xml**文件；\r\n\r\n​	YAML：**以数据为中心**，比json、xml等更适合做配置文件；\r\n\r\n​	YAML：配置例子\r\n\r\n```yaml\r\nserver:\r\n  port: 8081\r\n```\r\n\r\n​	XML：\r\n\r\n```xml\r\n<server>\r\n	<port>8081</port>\r\n</server>\r\n```\r\n\r\n\r\n\r\n## 2、YAML语法：\r\n\r\n### 1、基本语法\r\n\r\nk:(空格)v：表示一对键值对（空格必须有）；\r\n\r\n以**空格**的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的\r\n\r\n```yaml\r\nserver:\r\n    port: 8081\r\n    path: /hello\r\n```\r\n\r\n属性和值也是大小写敏感；\r\n\r\n\r\n\r\n### 2、值的写法\r\n\r\n#### 字面量：普通的值（数字，字符串，布尔）\r\n\r\n​	k: v：字面直接来写；\r\n\r\n​		字符串默认不用加上单引号或者双引号；\r\n\r\n​		\"\"：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思\r\n\r\n​				name:   \"zhangsan \\n lisi\"：输出；zhangsan 换行  lisi\r\n\r\n​		\'\'：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据\r\n\r\n​				name:   ‘zhangsan \\n lisi’：输出；zhangsan \\n  lisi\r\n\r\n\r\n\r\n#### 对象、Map（属性和值）（键值对）：\r\n\r\n​	k: v：在下一行来写对象的属性和值的关系；注意缩进\r\n\r\n​		对象还是k: v的方式\r\n\r\n```yaml\r\nfriends:\r\n		lastName: zhangsan\r\n		age: 20\r\n```\r\n\r\n行内写法：\r\n\r\n```yaml\r\nfriends: {lastName: zhangsan,age: 18}\r\n```\r\n\r\n\r\n\r\n#### 数组（List、Set）：\r\n\r\n用- 值表示数组中的一个元素\r\n\r\n```yaml\r\npets:\r\n - cat\r\n - dog\r\n - pig\r\n```\r\n\r\n行内写法\r\n\r\n```yaml\r\npets: [cat,dog,pig]\r\n```\r\n\r\n\r\n\r\n## 3、配置文件值注入\r\n\r\n配置文件\r\n\r\n```yaml\r\nperson:\r\n    lastName: hello\r\n    age: 18\r\n    boss: false\r\n    birth: 2017/12/12\r\n    maps: {k1: v1,k2: 12}\r\n    lists:\r\n      - lisi\r\n      - zhaoliu\r\n    dog:\r\n      name: 小狗\r\n      age: 12\r\n```\r\n\r\njavaBean：\r\n\r\n```java\r\n/**\r\n * 将配置文件中配置的每一个属性的值，映射到这个组件中\r\n * @ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；\r\n *      prefix = \"person\"：配置文件中哪个下面的所有属性进行一一映射\r\n *\r\n * 只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能；\r\n *\r\n */\r\n@Component\r\n@ConfigurationProperties(prefix = \"person\")\r\npublic class Person {\r\n\r\n    private String lastName;\r\n    private Integer age;\r\n    private Boolean boss;\r\n    private Date birth;\r\n\r\n    private Map<String,Object> maps;\r\n    private List<Object> lists;\r\n    private Dog dog;\r\n\r\n```\r\n\r\n\r\n\r\n我们可以导入配置文件处理器，以后编写配置就有提示了\r\n\r\n```xml\r\n<!--导入配置文件处理器，配置文件进行绑定就会有提示-->\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-configuration-processor</artifactId>\r\n			<optional>true</optional>\r\n		</dependency>\r\n```\r\n\r\n#### 1、properties配置文件在idea中默认utf-8可能会乱码\r\n\r\n调整\r\n\r\n![idea配置乱码](images/搜狗截图20180130161620.png)\r\n\r\n#### 2、@Value获取值和@ConfigurationProperties获取值比较\r\n\r\n|                      | @ConfigurationProperties | @Value     |\r\n| -------------------- | ------------------------ | ---------- |\r\n| 功能                 | 批量注入配置文件中的属性 | 一个个指定 |\r\n| 松散绑定（松散语法） | 支持                     | 不支持     |\r\n| SpEL                 | 不支持                   | 支持       |\r\n| JSR303数据校验       | 支持                     | 不支持     |\r\n| 复杂类型封装         | 支持                     | 不支持     |\r\n\r\n配置文件yml还是properties他们都能获取到值；\r\n\r\n如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；\r\n\r\n如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；\r\n\r\n\r\n\r\n#### 3、配置文件注入值数据校验\r\n\r\n```java\r\n@Component\r\n@ConfigurationProperties(prefix = \"person\")\r\n@Validated\r\npublic class Person {\r\n\r\n    /**\r\n     * <bean class=\"Person\">\r\n     *      <property name=\"lastName\" value=\"字面量/${key}从环境变量、配置文件中获取值/#{SpEL}\"></property>\r\n     * <bean/>\r\n     */\r\n\r\n   //lastName必须是邮箱格式\r\n    @Email\r\n    //@Value(\"${person.last-name}\")\r\n    private String lastName;\r\n    //@Value(\"#{11*2}\")\r\n    private Integer age;\r\n    //@Value(\"true\")\r\n    private Boolean boss;\r\n\r\n    private Date birth;\r\n    private Map<String,Object> maps;\r\n    private List<Object> lists;\r\n    private Dog dog;\r\n```\r\n\r\n\r\n\r\n#### 4、@PropertySource&@ImportResource&@Bean\r\n\r\n@**PropertySource**：加载指定的配置文件；\r\n\r\n```java\r\n/**\r\n * 将配置文件中配置的每一个属性的值，映射到这个组件中\r\n * @ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；\r\n *      prefix = \"person\"：配置文件中哪个下面的所有属性进行一一映射\r\n *\r\n * 只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能；\r\n *  @ConfigurationProperties(prefix = \"person\")默认从全局配置文件中获取值；\r\n *\r\n */\r\n@PropertySource(value = {\"classpath:person.properties\"})\r\n@Component\r\n@ConfigurationProperties(prefix = \"person\")\r\n//@Validated\r\npublic class Person {\r\n\r\n    /**\r\n     * <bean class=\"Person\">\r\n     *      <property name=\"lastName\" value=\"字面量/${key}从环境变量、配置文件中获取值/#{SpEL}\"></property>\r\n     * <bean/>\r\n     */\r\n\r\n   //lastName必须是邮箱格式\r\n   // @Email\r\n    //@Value(\"${person.last-name}\")\r\n    private String lastName;\r\n    //@Value(\"#{11*2}\")\r\n    private Integer age;\r\n    //@Value(\"true\")\r\n    private Boolean boss;\r\n\r\n```\r\n\r\n\r\n\r\n@**ImportResource**：导入Spring的配置文件，让配置文件里面的内容生效；\r\n\r\nSpring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；\r\n\r\n想让Spring的配置文件生效，加载进来；@**ImportResource**标注在一个配置类上\r\n\r\n```java\r\n@ImportResource(locations = {\"classpath:beans.xml\"})\r\n导入Spring的配置文件让其生效\r\n```\r\n\r\n\r\n\r\n不来编写Spring的配置文件\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n\r\n    <bean id=\"helloService\" class=\"com.atguigu.springboot.service.HelloService\"></bean>\r\n</beans>\r\n```\r\n\r\nSpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式\r\n\r\n1、配置类**@Configuration**------>Spring配置文件\r\n\r\n2、使用**@Bean**给容器中添加组件\r\n\r\n```java\r\n/**\r\n * @Configuration：指明当前类是一个配置类；就是来替代之前的Spring配置文件\r\n *\r\n * 在配置文件中用<bean><bean/>标签添加组件\r\n *\r\n */\r\n@Configuration\r\npublic class MyAppConfig {\r\n\r\n    //将方法的返回值添加到容器中；X容器中这个组件默认的id就是方法名\r\n    @Bean\r\n    public HelloService helloService02(){\r\n        System.out.println(\"配置类@Bean给容器中添加组件了...\");\r\n        return new HelloService();\r\n    }\r\n}\r\n```\r\n\r\n##4、配置文件占位符\r\n\r\n### 1、随机数\r\n\r\n```java\r\n${random.value}、${random.int}、${random.long}\r\n${random.int(10)}、${random.int[1024,65536]}\r\n\r\n```\r\n\r\n\r\n\r\n### 2、占位符获取之前配置的值，如果没有可以是用:指定默认值\r\n\r\n```properties\r\nperson.last-name=张三${random.uuid}\r\nperson.age=${random.int}\r\nperson.birth=2017/12/15\r\nperson.boss=false\r\nperson.maps.k1=v1\r\nperson.maps.k2=14\r\nperson.lists=a,b,c\r\nperson.dog.name=${person.hello:hello}_dog\r\nperson.dog.age=15\r\n```\r\n\r\n\r\n\r\n## 5、Profile\r\n\r\n### 1、多Profile文件\r\n\r\n我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml\r\n\r\n默认使用application.properties的配置；\r\n\r\n\r\n\r\n### 2、yml支持多文档块方式\r\n\r\n```yml\r\n\r\nserver:\r\n  port: 8081\r\nspring:\r\n  profiles:\r\n    active: prod\r\n\r\n---\r\nserver:\r\n  port: 8083\r\nspring:\r\n  profiles: dev\r\n\r\n\r\n---\r\n\r\nserver:\r\n  port: 8084\r\nspring:\r\n  profiles: prod  #指定属于哪个环境\r\n```\r\n\r\n\r\n\r\n\r\n\r\n### 3、激活指定profile\r\n\r\n​	1、在配置文件中指定  spring.profiles.active=dev\r\n\r\n​	2、命令行：\r\n\r\n​		java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev；\r\n\r\n​		可以直接在测试的时候，配置传入命令行参数\r\n\r\n​	3、虚拟机参数；\r\n\r\n​		-Dspring.profiles.active=dev\r\n\r\n\r\n\r\n## 6、配置文件加载位置\r\n\r\nspringboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件\r\n\r\n–file:./config/\r\n\r\n–file:./\r\n\r\n–classpath:/config/\r\n\r\n–classpath:/\r\n\r\n优先级由高到底，高优先级的配置会覆盖低优先级的配置；\r\n\r\nSpringBoot会从这四个位置全部加载主配置文件；**互补配置**；\r\n\r\n\r\n\r\n==我们还可以通过spring.config.location来改变默认的配置文件位置==\r\n\r\n**项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；**\r\n\r\njava -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=G:/application.properties\r\n\r\n## 7、外部配置加载顺序\r\n\r\n**==SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置==**\r\n\r\n**1.命令行参数**\r\n\r\n所有的配置都可以在命令行上进行指定\r\n\r\njava -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --server.port=8087  --server.context-path=/abc\r\n\r\n多个配置用空格分开； --配置项=值\r\n\r\n\r\n\r\n2.来自java:comp/env的JNDI属性\r\n\r\n3.Java系统属性（System.getProperties()）\r\n\r\n4.操作系统环境变量\r\n\r\n5.RandomValuePropertySource配置的random.*属性值\r\n\r\n\r\n\r\n==**由jar包外向jar包内进行寻找；**==\r\n\r\n==**优先加载带profile**==\r\n\r\n**6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件**\r\n\r\n**7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件**\r\n\r\n\r\n\r\n==**再来加载不带profile**==\r\n\r\n**8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件**\r\n\r\n**9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件**\r\n\r\n\r\n\r\n10.@Configuration注解类上的@PropertySource\r\n\r\n11.通过SpringApplication.setDefaultProperties指定的默认属性\r\n\r\n所有支持的配置加载来源；\r\n\r\n[参考官方文档](https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config)\r\n\r\n## 8、自动配置原理\r\n\r\n配置文件到底能写什么？怎么写？自动配置原理；\r\n\r\n[配置文件能配置的属性参照](https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties)\r\n\r\n\r\n\r\n### 1、**自动配置原理：**\r\n\r\n1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能 ==@EnableAutoConfiguration==\r\n\r\n**2）、@EnableAutoConfiguration 作用：**\r\n\r\n -  利用EnableAutoConfigurationImportSelector给容器中导入一些组件？\r\n\r\n- 可以查看selectImports()方法的内容；\r\n\r\n- List<String> configurations = getCandidateConfigurations(annotationMetadata,      attributes);获取候选的配置\r\n\r\n  - ```java\r\n    SpringFactoriesLoader.loadFactoryNames()\r\n    扫描所有jar包类路径下  META-INF/spring.factories\r\n    把扫描到的这些文件的内容包装成properties对象\r\n    从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加在容器中\r\n\r\n    ```\r\n\r\n    \r\n\r\n**==将 类路径下  META-INF/spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；==**\r\n\r\n```properties\r\n# Auto Configure\r\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\r\norg.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration\r\n```\r\n\r\n每一个这样的  xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；\r\n\r\n3）、每一个自动配置类进行自动配置功能；\r\n\r\n4）、以**HttpEncodingAutoConfiguration（Http编码自动配置）**为例解释自动配置原理；\r\n\r\n```java\r\n@Configuration   //表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件\r\n@EnableConfigurationProperties(HttpEncodingProperties.class)  //启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中\r\n\r\n@ConditionalOnWebApplication //Spring底层@Conditional注解（Spring注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是web应用，如果是，当前配置类生效\r\n\r\n@ConditionalOnClass(CharacterEncodingFilter.class)  //判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；\r\n\r\n@ConditionalOnProperty(prefix = \"spring.http.encoding\", value = \"enabled\", matchIfMissing = true)  //判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的\r\n//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；\r\npublic class HttpEncodingAutoConfiguration {\r\n  \r\n  	//他已经和SpringBoot的配置文件映射了\r\n  	private final HttpEncodingProperties properties;\r\n  \r\n   //只有一个有参构造器的情况下，参数的值就会从容器中拿\r\n  	public HttpEncodingAutoConfiguration(HttpEncodingProperties properties) {\r\n		this.properties = properties;\r\n	}\r\n  \r\n    @Bean   //给容器中添加一个组件，这个组件的某些值需要从properties中获取\r\n	@ConditionalOnMissingBean(CharacterEncodingFilter.class) //判断容器没有这个组件？\r\n	public CharacterEncodingFilter characterEncodingFilter() {\r\n		CharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();\r\n		filter.setEncoding(this.properties.getCharset().name());\r\n		filter.setForceRequestEncoding(this.properties.shouldForce(Type.REQUEST));\r\n		filter.setForceResponseEncoding(this.properties.shouldForce(Type.RESPONSE));\r\n		return filter;\r\n	}\r\n```\r\n\r\n根据当前不同的条件判断，决定这个配置类是否生效？\r\n\r\n一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n5）、所有在配置文件中能配置的属性都是在xxxxProperties类中封装者‘；配置文件能配置什么就可以参照某个功能对应的这个属性类\r\n\r\n```java\r\n@ConfigurationProperties(prefix = \"spring.http.encoding\")  //从配置文件中获取指定的值和bean的属性进行绑定\r\npublic class HttpEncodingProperties {\r\n\r\n   public static final Charset DEFAULT_CHARSET = Charset.forName(\"UTF-8\");\r\n```\r\n\r\n\r\n\r\n\r\n\r\n**精髓：**\r\n\r\n​	**1）、SpringBoot启动会加载大量的自动配置类**\r\n\r\n​	**2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；**\r\n\r\n​	**3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）**\r\n\r\n​	**4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；**\r\n\r\n\r\n\r\nxxxxAutoConfigurartion：自动配置类；\r\n\r\n给容器中添加组件\r\n\r\nxxxxProperties:封装配置文件中相关属性；\r\n\r\n\r\n\r\n### 2、细节\r\n\r\n\r\n\r\n#### 1、@Conditional派生注解（Spring注解版原生的@Conditional作用）\r\n\r\n作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；\r\n\r\n| @Conditional扩展注解                | 作用（判断是否满足当前指定条件）               |\r\n| ------------------------------- | ------------------------------ |\r\n| @ConditionalOnJava              | 系统的java版本是否符合要求                |\r\n| @ConditionalOnBean              | 容器中存在指定Bean；                   |\r\n| @ConditionalOnMissingBean       | 容器中不存在指定Bean；                  |\r\n| @ConditionalOnExpression        | 满足SpEL表达式指定                    |\r\n| @ConditionalOnClass             | 系统中有指定的类                       |\r\n| @ConditionalOnMissingClass      | 系统中没有指定的类                      |\r\n| @ConditionalOnSingleCandidate   | 容器中只有一个指定的Bean，或者这个Bean是首选Bean |\r\n| @ConditionalOnProperty          | 系统中指定的属性是否有指定的值                |\r\n| @ConditionalOnResource          | 类路径下是否存在指定资源文件                 |\r\n| @ConditionalOnWebApplication    | 当前是web环境                       |\r\n| @ConditionalOnNotWebApplication | 当前不是web环境                      |\r\n| @ConditionalOnJndi              | JNDI存在指定项                      |\r\n\r\n**自动配置类必须在一定的条件下才能生效；**\r\n\r\n我们怎么知道哪些自动配置类生效；\r\n\r\n**==我们可以通过启用  debug=true属性；来让控制台打印自动配置报告==**，这样我们就可以很方便的知道哪些自动配置类生效；\r\n\r\n```java\r\n=========================\r\nAUTO-CONFIGURATION REPORT\r\n=========================\r\n\r\n\r\nPositive matches:（自动配置类启用的）\r\n-----------------\r\n\r\n   DispatcherServletAutoConfiguration matched:\r\n      - @ConditionalOnClass found required class \'org.springframework.web.servlet.DispatcherServlet\'; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition)\r\n      - @ConditionalOnWebApplication (required) found StandardServletEnvironment (OnWebApplicationCondition)\r\n        \r\n    \r\nNegative matches:（没有启动，没有匹配成功的自动配置类）\r\n-----------------\r\n\r\n   ActiveMQAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required classes \'javax.jms.ConnectionFactory\', \'org.apache.activemq.ActiveMQConnectionFactory\' (OnClassCondition)\r\n\r\n   AopAutoConfiguration:\r\n      Did not match:\r\n         - @ConditionalOnClass did not find required classes \'org.aspectj.lang.annotation.Aspect\', \'org.aspectj.lang.reflect.Advice\' (OnClassCondition)\r\n        \r\n```\r\n\r\n\r\n\r\n\r\n\r\n# 三、日志\r\n\r\n## 1、日志框架\r\n\r\n 小张；开发一个大型系统；\r\n\r\n​		1、System.out.println(\"\")；将关键数据打印在控制台；去掉？写在一个文件？\r\n\r\n​		2、框架来记录系统的一些运行时信息；日志框架 ；  zhanglogging.jar；\r\n\r\n​		3、高大上的几个功能？异步模式？自动归档？xxxx？  zhanglogging-good.jar？\r\n\r\n​		4、将以前框架卸下来？换上新的框架，重新修改之前相关的API；zhanglogging-prefect.jar；\r\n\r\n​		5、JDBC---数据库驱动；\r\n\r\n​			写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar；\r\n\r\n​			给项目中导入具体的日志实现就行了；我们之前的日志框架都是实现的抽象层；\r\n\r\n\r\n\r\n**市面上的日志框架；**\r\n\r\nJUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j....\r\n\r\n| 日志门面  （日志的抽象层）                           | 日志实现                                     |\r\n| ---------------------------------------- | ---------------------------------------- |\r\n| ~~JCL（Jakarta  Commons Logging）~~    SLF4j（Simple  Logging Facade for Java）    **~~jboss-logging~~** | Log4j  JUL（java.util.logging）  Log4j2  **Logback** |\r\n\r\n左边选一个门面（抽象层）、右边来选一个实现；\r\n\r\n日志门面：  SLF4J；\r\n\r\n日志实现：Logback；\r\n\r\n\r\n\r\nSpringBoot：底层是Spring框架，Spring框架默认是用JCL；‘\r\n\r\n​	**==SpringBoot选用 SLF4j和logback；==**\r\n\r\n\r\n\r\n## 2、SLF4j使用\r\n\r\n### 1、如何在系统中使用SLF4j   https://www.slf4j.org\r\n\r\n以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；\r\n\r\n给系统里面导入slf4j的jar和  logback的实现jar\r\n\r\n```java\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class HelloWorld {\r\n  public static void main(String[] args) {\r\n    Logger logger = LoggerFactory.getLogger(HelloWorld.class);\r\n    logger.info(\"Hello World\");\r\n  }\r\n}\r\n```\r\n\r\n图示；\r\n\r\n![images/concrete-bindings.png](images/concrete-bindings.png)\r\n\r\n每一个日志的实现框架都有自己的配置文件。使用slf4j以后，**配置文件还是做成日志实现框架自己本身的配置文件；**\r\n\r\n### 2、遗留问题\r\n\r\na（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx\r\n\r\n统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？\r\n\r\n![](images/legacy.png)\r\n\r\n**如何让系统中所有的日志都统一到slf4j；**\r\n\r\n==1、将系统中其他日志框架先排除出去；==\r\n\r\n==2、用中间包来替换原有的日志框架；==\r\n\r\n==3、我们导入slf4j其他的实现==\r\n\r\n\r\n\r\n## 3、SpringBoot日志关系\r\n\r\n```xml\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter</artifactId>\r\n		</dependency>\r\n```\r\n\r\n\r\n\r\nSpringBoot使用它来做日志功能；\r\n\r\n```xml\r\n	<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-logging</artifactId>\r\n		</dependency>\r\n```\r\n\r\n底层依赖关系\r\n\r\n![](images/搜狗截图20180131220946.png)\r\n\r\n总结：\r\n\r\n​	1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录\r\n\r\n​	2）、SpringBoot也把其他的日志都替换成了slf4j；\r\n\r\n​	3）、中间替换包？\r\n\r\n```java\r\n@SuppressWarnings(\"rawtypes\")\r\npublic abstract class LogFactory {\r\n\r\n    static String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = \"http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j\";\r\n\r\n    static LogFactory logFactory = new SLF4JLogFactory();\r\n```\r\n\r\n![](images/搜狗截图20180131221411.png)\r\n\r\n\r\n\r\n​	4）、如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？\r\n\r\n​			Spring框架用的是commons-logging；\r\n\r\n```xml\r\n		<dependency>\r\n			<groupId>org.springframework</groupId>\r\n			<artifactId>spring-core</artifactId>\r\n			<exclusions>\r\n				<exclusion>\r\n					<groupId>commons-logging</groupId>\r\n					<artifactId>commons-logging</artifactId>\r\n				</exclusion>\r\n			</exclusions>\r\n		</dependency>\r\n```\r\n\r\n**==SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；==**\r\n\r\n## 4、日志使用；\r\n\r\n### 1、默认配置\r\n\r\nSpringBoot默认帮我们配置好了日志；\r\n\r\n```java\r\n	//记录器\r\n	Logger logger = LoggerFactory.getLogger(getClass());\r\n	@Test\r\n	public void contextLoads() {\r\n		//System.out.println();\r\n\r\n		//日志的级别；\r\n		//由低到高   trace<debug<info<warn<error\r\n		//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效\r\n		logger.trace(\"这是trace日志...\");\r\n		logger.debug(\"这是debug日志...\");\r\n		//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别\r\n		logger.info(\"这是info日志...\");\r\n		logger.warn(\"这是warn日志...\");\r\n		logger.error(\"这是error日志...\");\r\n\r\n\r\n	}\r\n```\r\n\r\n\r\n\r\n        日志输出格式：\r\n    		%d表示日期时间，\r\n    		%thread表示线程名，\r\n    		%-5level：级别从左显示5个字符宽度\r\n    		%logger{50} 表示logger名字最长50个字符，否则按照句点分割。 \r\n    		%msg：日志消息，\r\n    		%n是换行符\r\n        -->\r\n        %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n\r\nSpringBoot修改日志的默认配置\r\n\r\n```properties\r\nlogging.level.com.atguigu=trace\r\n\r\n\r\n#logging.path=\r\n# 不指定路径在当前项目下生成springboot.log日志\r\n# 可以指定完整的路径；\r\n#logging.file=G:/springboot.log\r\n\r\n# 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件\r\nlogging.path=/spring/log\r\n\r\n#  在控制台输出的日志的格式\r\nlogging.pattern.console=%d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n\r\n# 指定文件中日志输出的格式\r\nlogging.pattern.file=%d{yyyy-MM-dd} === [%thread] === %-5level === %logger{50} ==== %msg%n\r\n```\r\n\r\n| logging.file | logging.path | Example  | Description             |\r\n| ------------ | ------------ | -------- | ----------------------- |\r\n| (none)       | (none)       |          | 只在控制台输出                 |\r\n| 指定文件名        | (none)       | my.log   | 输出日志到my.log文件           |\r\n| (none)       | 指定目录         | /var/log | 输出到指定目录的 spring.log 文件中 |\r\n\r\n### 2、指定配置\r\n\r\n给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了\r\n\r\n| Logging System          | Customization                            |\r\n| ----------------------- | ---------------------------------------- |\r\n| Logback                 | `logback-spring.xml`, `logback-spring.groovy`, `logback.xml` or `logback.groovy` |\r\n| Log4j2                  | `log4j2-spring.xml` or `log4j2.xml`      |\r\n| JDK (Java Util Logging) | `logging.properties`                     |\r\n\r\nlogback.xml：直接就被日志框架识别了；\r\n\r\n**logback-spring.xml**：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能\r\n\r\n```xml\r\n<springProfile name=\"staging\">\r\n    <!-- configuration to be enabled when the \"staging\" profile is active -->\r\n  	可以指定某段配置只在某个环境下生效\r\n</springProfile>\r\n\r\n```\r\n\r\n如：\r\n\r\n```xml\r\n<appender name=\"stdout\" class=\"ch.qos.logback.core.ConsoleAppender\">\r\n        <!--\r\n        日志输出格式：\r\n			%d表示日期时间，\r\n			%thread表示线程名，\r\n			%-5level：级别从左显示5个字符宽度\r\n			%logger{50} 表示logger名字最长50个字符，否则按照句点分割。 \r\n			%msg：日志消息，\r\n			%n是换行符\r\n        -->\r\n        <layout class=\"ch.qos.logback.classic.PatternLayout\">\r\n            <springProfile name=\"dev\">\r\n                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ----> [%thread] ---> %-5level %logger{50} - %msg%n</pattern>\r\n            </springProfile>\r\n            <springProfile name=\"!dev\">\r\n                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ==== [%thread] ==== %-5level %logger{50} - %msg%n</pattern>\r\n            </springProfile>\r\n        </layout>\r\n    </appender>\r\n```\r\n\r\n\r\n\r\n如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误\r\n\r\n `no applicable action for [springProfile]`\r\n\r\n## 5、切换日志框架\r\n\r\n可以按照slf4j的日志适配图，进行相关的切换；\r\n\r\nslf4j+log4j的方式；\r\n\r\n```xml\r\n<dependency>\r\n  <groupId>org.springframework.boot</groupId>\r\n  <artifactId>spring-boot-starter-web</artifactId>\r\n  <exclusions>\r\n    <exclusion>\r\n      <artifactId>logback-classic</artifactId>\r\n      <groupId>ch.qos.logback</groupId>\r\n    </exclusion>\r\n    <exclusion>\r\n      <artifactId>log4j-over-slf4j</artifactId>\r\n      <groupId>org.slf4j</groupId>\r\n    </exclusion>\r\n  </exclusions>\r\n</dependency>\r\n\r\n<dependency>\r\n  <groupId>org.slf4j</groupId>\r\n  <artifactId>slf4j-log4j12</artifactId>\r\n</dependency>\r\n\r\n```\r\n\r\n\r\n\r\n\r\n\r\n切换为log4j2\r\n\r\n```xml\r\n   <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n            <exclusions>\r\n                <exclusion>\r\n                    <artifactId>spring-boot-starter-logging</artifactId>\r\n                    <groupId>org.springframework.boot</groupId>\r\n                </exclusion>\r\n            </exclusions>\r\n        </dependency>\r\n\r\n<dependency>\r\n  <groupId>org.springframework.boot</groupId>\r\n  <artifactId>spring-boot-starter-log4j2</artifactId>\r\n</dependency>\r\n```\r\n\r\n-----------------\r\n\r\n# 四、Web开发\r\n\r\n## 1、简介\r\n\r\n\r\n\r\n使用SpringBoot；\r\n\r\n**1）、创建SpringBoot应用，选中我们需要的模块；**\r\n\r\n**2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来**\r\n\r\n**3）、自己编写业务代码；**\r\n\r\n\r\n\r\n**自动配置原理？**\r\n\r\n这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx\r\n\r\n```\r\nxxxxAutoConfiguration：帮我们给容器中自动配置组件；\r\nxxxxProperties:配置类来封装配置文件的内容；\r\n\r\n```\r\n\r\n\r\n\r\n## 2、SpringBoot对静态资源的映射规则；\r\n\r\n```java\r\n@ConfigurationProperties(prefix = \"spring.resources\", ignoreUnknownFields = false)\r\npublic class ResourceProperties implements ResourceLoaderAware {\r\n  //可以设置和静态资源有关的参数，缓存时间等\r\n```\r\n\r\n\r\n\r\n```java\r\n	WebMvcAuotConfiguration：\r\n		@Override\r\n		public void addResourceHandlers(ResourceHandlerRegistry registry) {\r\n			if (!this.resourceProperties.isAddMappings()) {\r\n				logger.debug(\"Default resource handling disabled\");\r\n				return;\r\n			}\r\n			Integer cachePeriod = this.resourceProperties.getCachePeriod();\r\n			if (!registry.hasMappingForPattern(\"/webjars/**\")) {\r\n				customizeResourceHandlerRegistration(\r\n						registry.addResourceHandler(\"/webjars/**\")\r\n								.addResourceLocations(\r\n										\"classpath:/META-INF/resources/webjars/\")\r\n						.setCachePeriod(cachePeriod));\r\n			}\r\n			String staticPathPattern = this.mvcProperties.getStaticPathPattern();\r\n          	//静态资源文件夹映射\r\n			if (!registry.hasMappingForPattern(staticPathPattern)) {\r\n				customizeResourceHandlerRegistration(\r\n						registry.addResourceHandler(staticPathPattern)\r\n								.addResourceLocations(\r\n										this.resourceProperties.getStaticLocations())\r\n						.setCachePeriod(cachePeriod));\r\n			}\r\n		}\r\n\r\n        //配置欢迎页映射\r\n		@Bean\r\n		public WelcomePageHandlerMapping welcomePageHandlerMapping(\r\n				ResourceProperties resourceProperties) {\r\n			return new WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),\r\n					this.mvcProperties.getStaticPathPattern());\r\n		}\r\n\r\n       //配置喜欢的图标\r\n		@Configuration\r\n		@ConditionalOnProperty(value = \"spring.mvc.favicon.enabled\", matchIfMissing = true)\r\n		public static class FaviconConfiguration {\r\n\r\n			private final ResourceProperties resourceProperties;\r\n\r\n			public FaviconConfiguration(ResourceProperties resourceProperties) {\r\n				this.resourceProperties = resourceProperties;\r\n			}\r\n\r\n			@Bean\r\n			public SimpleUrlHandlerMapping faviconHandlerMapping() {\r\n				SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();\r\n				mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + 1);\r\n              	//所有  **/favicon.ico \r\n				mapping.setUrlMap(Collections.singletonMap(\"**/favicon.ico\",\r\n						faviconRequestHandler()));\r\n				return mapping;\r\n			}\r\n\r\n			@Bean\r\n			public ResourceHttpRequestHandler faviconRequestHandler() {\r\n				ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();\r\n				requestHandler\r\n						.setLocations(this.resourceProperties.getFaviconLocations());\r\n				return requestHandler;\r\n			}\r\n\r\n		}\r\n\r\n```\r\n\r\n\r\n\r\n==1）、所有 /webjars/** ，都去 classpath:/META-INF/resources/webjars/ 找资源；==\r\n\r\n​	webjars：以jar包的方式引入静态资源；\r\n\r\nhttp://www.webjars.org/\r\n\r\n![](images/搜狗截图20180203181751.png)\r\n\r\nlocalhost:8080/webjars/jquery/3.3.1/jquery.js\r\n\r\n```xml\r\n<!--引入jquery-webjar-->在访问的时候只需要写webjars下面资源的名称即可\r\n		<dependency>\r\n			<groupId>org.webjars</groupId>\r\n			<artifactId>jquery</artifactId>\r\n			<version>3.3.1</version>\r\n		</dependency>\r\n```\r\n\r\n\r\n\r\n==2）、\"/**\" 访问当前项目的任何资源，都去（静态资源的文件夹）找映射==\r\n\r\n```\r\n\"classpath:/META-INF/resources/\", \r\n\"classpath:/resources/\",\r\n\"classpath:/static/\", \r\n\"classpath:/public/\" \r\n\"/\"：当前项目的根路径\r\n```\r\n\r\nlocalhost:8080/abc ===  去静态资源文件夹里面找abc\r\n\r\n==3）、欢迎页； 静态资源文件夹下的所有index.html页面；被\"/**\"映射；==\r\n\r\n​	localhost:8080/   找index页面\r\n\r\n==4）、所有的 **/favicon.ico  都是在静态资源文件下找；==\r\n\r\n\r\n\r\n## 3、模板引擎\r\n\r\nJSP、Velocity、Freemarker、Thymeleaf\r\n\r\n![](images/template-engine.png)\r\n\r\n\r\n\r\nSpringBoot推荐的Thymeleaf；\r\n\r\n语法更简单，功能更强大；\r\n\r\n\r\n\r\n### 1、引入thymeleaf；\r\n\r\n```xml\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-thymeleaf</artifactId>\r\n          	2.1.6\r\n		</dependency>\r\n切换thymeleaf版本\r\n<properties>\r\n		<thymeleaf.version>3.0.9.RELEASE</thymeleaf.version>\r\n		<!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 -->\r\n		<!-- thymeleaf2   layout1-->\r\n		<thymeleaf-layout-dialect.version>2.2.2</thymeleaf-layout-dialect.version>\r\n  </properties>\r\n```\r\n\r\n\r\n\r\n### 2、Thymeleaf使用\r\n\r\n```java\r\n@ConfigurationProperties(prefix = \"spring.thymeleaf\")\r\npublic class ThymeleafProperties {\r\n\r\n	private static final Charset DEFAULT_ENCODING = Charset.forName(\"UTF-8\");\r\n\r\n	private static final MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(\"text/html\");\r\n\r\n	public static final String DEFAULT_PREFIX = \"classpath:/templates/\";\r\n\r\n	public static final String DEFAULT_SUFFIX = \".html\";\r\n  	//\r\n```\r\n\r\n只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；\r\n\r\n使用：\r\n\r\n1、导入thymeleaf的名称空间\r\n\r\n```xml\r\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\r\n```\r\n\r\n2、使用thymeleaf语法；\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n    <h1>成功！</h1>\r\n    <!--th:text 将div里面的文本内容设置为 -->\r\n    <div th:text=\"${hello}\">这是显示欢迎信息</div>\r\n</body>\r\n</html>\r\n```\r\n\r\n### 3、语法规则\r\n\r\n1）、th:text；改变当前元素里面的文本内容；\r\n\r\n​	th：任意html属性；来替换原生属性的值\r\n\r\n![](images/2018-02-04_123955.png)\r\n\r\n\r\n\r\n2）、表达式？\r\n\r\n```properties\r\nSimple expressions:（表达式语法）\r\n    Variable Expressions: ${...}：获取变量值；OGNL；\r\n    		1）、获取对象的属性、调用方法\r\n    		2）、使用内置的基本对象：\r\n    			#ctx : the context object.\r\n    			#vars: the context variables.\r\n                #locale : the context locale.\r\n                #request : (only in Web Contexts) the HttpServletRequest object.\r\n                #response : (only in Web Contexts) the HttpServletResponse object.\r\n                #session : (only in Web Contexts) the HttpSession object.\r\n                #servletContext : (only in Web Contexts) the ServletContext object.\r\n                \r\n                ${session.foo}\r\n            3）、内置的一些工具对象：\r\n#execInfo : information about the template being processed.\r\n#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #{…} syntax.\r\n#uris : methods for escaping parts of URLs/URIs\r\n#conversions : methods for executing the configured conversion service (if any).\r\n#dates : methods for java.util.Date objects: formatting, component extraction, etc.\r\n#calendars : analogous to #dates , but for java.util.Calendar objects.\r\n#numbers : methods for formatting numeric objects.\r\n#strings : methods for String objects: contains, startsWith, prepending/appending, etc.\r\n#objects : methods for objects in general.\r\n#bools : methods for boolean evaluation.\r\n#arrays : methods for arrays.\r\n#lists : methods for lists.\r\n#sets : methods for sets.\r\n#maps : methods for maps.\r\n#aggregates : methods for creating aggregates on arrays or collections.\r\n#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).\r\n\r\n    Selection Variable Expressions: *{...}：选择表达式：和${}在功能上是一样；\r\n    	补充：配合 th:object=\"${session.user}：\r\n   <div th:object=\"${session.user}\">\r\n    <p>Name: <span th:text=\"*{firstName}\">Sebastian</span>.</p>\r\n    <p>Surname: <span th:text=\"*{lastName}\">Pepper</span>.</p>\r\n    <p>Nationality: <span th:text=\"*{nationality}\">Saturn</span>.</p>\r\n    </div>\r\n    \r\n    Message Expressions: #{...}：获取国际化内容\r\n    Link URL Expressions: @{...}：定义URL；\r\n    		@{/order/process(execId=${execId},execType=\'FAST\')}\r\n    Fragment Expressions: ~{...}：片段引用表达式\r\n    		<div th:insert=\"~{commons :: main}\">...</div>\r\n    		\r\nLiterals（字面量）\r\n      Text literals: \'one text\' , \'Another one!\' ,…\r\n      Number literals: 0 , 34 , 3.0 , 12.3 ,…\r\n      Boolean literals: true , false\r\n      Null literal: null\r\n      Literal tokens: one , sometext , main ,…\r\nText operations:（文本操作）\r\n    String concatenation: +\r\n    Literal substitutions: |The name is ${name}|\r\nArithmetic operations:（数学运算）\r\n    Binary operators: + , - , * , / , %\r\n    Minus sign (unary operator): -\r\nBoolean operations:（布尔运算）\r\n    Binary operators: and , or\r\n    Boolean negation (unary operator): ! , not\r\nComparisons and equality:（比较运算）\r\n    Comparators: > , < , >= , <= ( gt , lt , ge , le )\r\n    Equality operators: == , != ( eq , ne )\r\nConditional operators:条件运算（三元运算符）\r\n    If-then: (if) ? (then)\r\n    If-then-else: (if) ? (then) : (else)\r\n    Default: (value) ?: (defaultvalue)\r\nSpecial tokens:\r\n    No-Operation: _ \r\n```\r\n\r\n## 4、SpringMVC自动配置\r\n\r\nhttps://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications\r\n\r\n### 1. Spring MVC auto-configuration\r\n\r\nSpring Boot 自动配置好了SpringMVC\r\n\r\n以下是SpringBoot对SpringMVC的默认配置:**==（WebMvcAutoConfiguration）==**\r\n\r\n- Inclusion of `ContentNegotiatingViewResolver` and `BeanNameViewResolver` beans.\r\n  - 自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））\r\n  - ContentNegotiatingViewResolver：组合所有的视图解析器的；\r\n  - ==如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；==\r\n\r\n- Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars\r\n\r\n- Static `index.html` support. 静态首页访问\r\n\r\n- Custom `Favicon` support (see below).  favicon.ico\r\n\r\n  \r\n\r\n- 自动注册了 of `Converter`, `GenericConverter`, `Formatter` beans.\r\n\r\n  - Converter：转换器；  public String hello(User user)：类型转换使用Converter\r\n  - `Formatter`  格式化器；  2017.12.17===Date；\r\n\r\n```java\r\n		@Bean\r\n		@ConditionalOnProperty(prefix = \"spring.mvc\", name = \"date-format\")//在文件中配置日期格式化的规则\r\n		public Formatter<Date> dateFormatter() {\r\n			return new DateFormatter(this.mvcProperties.getDateFormat());//日期格式化组件\r\n		}\r\n```\r\n\r\n​	==自己添加的格式化器转换器，我们只需要放在容器中即可==\r\n\r\n- Support for `HttpMessageConverters` (see below).\r\n\r\n  - HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User---Json；\r\n\r\n  - `HttpMessageConverters` 是从容器中确定；获取所有的HttpMessageConverter；\r\n\r\n    ==自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）==\r\n\r\n    \r\n\r\n- Automatic registration of `MessageCodesResolver` (see below).定义错误代码生成规则\r\n\r\n- Automatic use of a `ConfigurableWebBindingInitializer` bean (see below).\r\n\r\n  ==我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）==\r\n\r\n  ```\r\n  初始化WebDataBinder；\r\n  请求数据=====JavaBean；\r\n  ```\r\n\r\n**org.springframework.boot.autoconfigure.web：web的所有自动场景；**\r\n\r\nIf you want to keep Spring Boot MVC features, and you just want to add additional [MVC configuration](https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle#mvc) (interceptors, formatters, view controllers etc.) you can add your own `@Configuration` class of type `WebMvcConfigurerAdapter`, but **without** `@EnableWebMvc`. If you wish to provide custom instances of `RequestMappingHandlerMapping`, `RequestMappingHandlerAdapter` or `ExceptionHandlerExceptionResolver` you can declare a `WebMvcRegistrationsAdapter` instance providing such components.\r\n\r\nIf you want to take complete control of Spring MVC, you can add your own `@Configuration` annotated with `@EnableWebMvc`.\r\n\r\n### 2、扩展SpringMVC\r\n\r\n```xml\r\n    <mvc:view-controller path=\"/hello\" view-name=\"success\"/>\r\n    <mvc:interceptors>\r\n        <mvc:interceptor>\r\n            <mvc:mapping path=\"/hello\"/>\r\n            <bean></bean>\r\n        </mvc:interceptor>\r\n    </mvc:interceptors>\r\n```\r\n\r\n**==编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc==**;\r\n\r\n既保留了所有的自动配置，也能用我们扩展的配置；\r\n\r\n```java\r\n//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能\r\n@Configuration\r\npublic class MyMvcConfig extends WebMvcConfigurerAdapter {\r\n\r\n    @Override\r\n    public void addViewControllers(ViewControllerRegistry registry) {\r\n       // super.addViewControllers(registry);\r\n        //浏览器发送 /atguigu 请求来到 success\r\n        registry.addViewController(\"/atguigu\").setViewName(\"success\");\r\n    }\r\n}\r\n```\r\n\r\n原理：\r\n\r\n​	1）、WebMvcAutoConfiguration是SpringMVC的自动配置类\r\n\r\n​	2）、在做其他自动配置时会导入；@Import(**EnableWebMvcConfiguration**.class)\r\n\r\n```java\r\n    @Configuration\r\n	public static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration {\r\n      private final WebMvcConfigurerComposite configurers = new WebMvcConfigurerComposite();\r\n\r\n	 //从容器中获取所有的WebMvcConfigurer\r\n      @Autowired(required = false)\r\n      public void setConfigurers(List<WebMvcConfigurer> configurers) {\r\n          if (!CollectionUtils.isEmpty(configurers)) {\r\n              this.configurers.addWebMvcConfigurers(configurers);\r\n            	//一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用；  \r\n            	@Override\r\n             // public void addViewControllers(ViewControllerRegistry registry) {\r\n              //    for (WebMvcConfigurer delegate : this.delegates) {\r\n               //       delegate.addViewControllers(registry);\r\n               //   }\r\n              }\r\n          }\r\n	}\r\n```\r\n\r\n​	3）、容器中所有的WebMvcConfigurer都会一起起作用；\r\n\r\n​	4）、我们的配置类也会被调用；\r\n\r\n​	效果：SpringMVC的自动配置和我们的扩展配置都会起作用；\r\n\r\n### 3、全面接管SpringMVC；\r\n\r\nSpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了\r\n\r\n**我们需要在配置类中添加@EnableWebMvc即可；**\r\n\r\n```java\r\n//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能\r\n@EnableWebMvc\r\n@Configuration\r\npublic class MyMvcConfig extends WebMvcConfigurerAdapter {\r\n\r\n    @Override\r\n    public void addViewControllers(ViewControllerRegistry registry) {\r\n       // super.addViewControllers(registry);\r\n        //浏览器发送 /atguigu 请求来到 success\r\n        registry.addViewController(\"/atguigu\").setViewName(\"success\");\r\n    }\r\n}\r\n```\r\n\r\n原理：\r\n\r\n为什么@EnableWebMvc自动配置就失效了；\r\n\r\n1）@EnableWebMvc的核心\r\n\r\n```java\r\n@Import(DelegatingWebMvcConfiguration.class)\r\npublic @interface EnableWebMvc {\r\n```\r\n\r\n2）、\r\n\r\n```java\r\n@Configuration\r\npublic class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport {\r\n```\r\n\r\n3）、\r\n\r\n```java\r\n@Configuration\r\n@ConditionalOnWebApplication\r\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class,\r\n		WebMvcConfigurerAdapter.class })\r\n//容器中没有这个组件的时候，这个自动配置类才生效\r\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\r\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\r\n@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class,\r\n		ValidationAutoConfiguration.class })\r\npublic class WebMvcAutoConfiguration {\r\n```\r\n\r\n4）、@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；\r\n\r\n5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；\r\n\r\n\r\n\r\n## 5、如何修改SpringBoot的默认配置\r\n\r\n模式：\r\n\r\n​	1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；\r\n\r\n​	2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置\r\n\r\n​	3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置\r\n\r\n## 6、RestfulCRUD\r\n\r\n### 1）、默认访问首页\r\n\r\n```java\r\n\r\n//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能\r\n//@EnableWebMvc   不要接管SpringMVC\r\n@Configuration\r\npublic class MyMvcConfig extends WebMvcConfigurerAdapter {\r\n\r\n    @Override\r\n    public void addViewControllers(ViewControllerRegistry registry) {\r\n       // super.addViewControllers(registry);\r\n        //浏览器发送 /atguigu 请求来到 success\r\n        registry.addViewController(\"/atguigu\").setViewName(\"success\");\r\n    }\r\n\r\n    //所有的WebMvcConfigurerAdapter组件都会一起起作用\r\n    @Bean //将组件注册在容器\r\n    public WebMvcConfigurerAdapter webMvcConfigurerAdapter(){\r\n        WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() {\r\n            @Override\r\n            public void addViewControllers(ViewControllerRegistry registry) {\r\n                registry.addViewController(\"/\").setViewName(\"login\");\r\n                registry.addViewController(\"/index.html\").setViewName(\"login\");\r\n            }\r\n        };\r\n        return adapter;\r\n    }\r\n}\r\n\r\n```\r\n\r\n### 2）、国际化\r\n\r\n**1）、编写国际化配置文件；**\r\n\r\n2）、使用ResourceBundleMessageSource管理国际化资源文件\r\n\r\n3）、在页面使用fmt:message取出国际化内容\r\n\r\n\r\n\r\n步骤：\r\n\r\n1）、编写国际化配置文件，抽取页面需要显示的国际化消息\r\n\r\n![](images/搜狗截图20180211130721.png)\r\n\r\n\r\n\r\n2）、SpringBoot自动配置好了管理国际化资源文件的组件；\r\n\r\n```java\r\n@ConfigurationProperties(prefix = \"spring.messages\")\r\npublic class MessageSourceAutoConfiguration {\r\n    \r\n    /**\r\n	 * Comma-separated list of basenames (essentially a fully-qualified classpath\r\n	 * location), each following the ResourceBundle convention with relaxed support for\r\n	 * slash based locations. If it doesn\'t contain a package qualifier (such as\r\n	 * \"org.mypackage\"), it will be resolved from the classpath root.\r\n	 */\r\n	private String basename = \"messages\";  \r\n    //我们的配置文件可以直接放在类路径下叫messages.properties；\r\n    \r\n    @Bean\r\n	public MessageSource messageSource() {\r\n		ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\r\n		if (StringUtils.hasText(this.basename)) {\r\n            //设置国际化资源文件的基础名（去掉语言国家代码的）\r\n			messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(\r\n					StringUtils.trimAllWhitespace(this.basename)));\r\n		}\r\n		if (this.encoding != null) {\r\n			messageSource.setDefaultEncoding(this.encoding.name());\r\n		}\r\n		messageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale);\r\n		messageSource.setCacheSeconds(this.cacheSeconds);\r\n		messageSource.setAlwaysUseMessageFormat(this.alwaysUseMessageFormat);\r\n		return messageSource;\r\n	}\r\n```\r\n\r\n\r\n\r\n3）、去页面获取国际化的值；\r\n\r\n![](images/搜狗截图20180211134506.png)\r\n\r\n\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\"  xmlns:th=\"http://www.thymeleaf.org\">\r\n	<head>\r\n		<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n		<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\r\n		<meta name=\"description\" content=\"\">\r\n		<meta name=\"author\" content=\"\">\r\n		<title>Signin Template for Bootstrap</title>\r\n		<!-- Bootstrap core CSS -->\r\n		<link href=\"asserts/css/bootstrap.min.css\" th:href=\"@{/webjars/bootstrap/4.0.0/css/bootstrap.css}\" rel=\"stylesheet\">\r\n		<!-- Custom styles for this template -->\r\n		<link href=\"asserts/css/signin.css\" th:href=\"@{/asserts/css/signin.css}\" rel=\"stylesheet\">\r\n	</head>\r\n\r\n	<body class=\"text-center\">\r\n		<form class=\"form-signin\" action=\"dashboard.html\">\r\n			<img class=\"mb-4\" th:src=\"@{/asserts/img/bootstrap-solid.svg}\" src=\"asserts/img/bootstrap-solid.svg\" alt=\"\" width=\"72\" height=\"72\">\r\n			<h1 class=\"h3 mb-3 font-weight-normal\" th:text=\"#{login.tip}\">Please sign in</h1>\r\n			<label class=\"sr-only\" th:text=\"#{login.username}\">Username</label>\r\n			<input type=\"text\" class=\"form-control\" placeholder=\"Username\" th:placeholder=\"#{login.username}\" required=\"\" autofocus=\"\">\r\n			<label class=\"sr-only\" th:text=\"#{login.password}\">Password</label>\r\n			<input type=\"password\" class=\"form-control\" placeholder=\"Password\" th:placeholder=\"#{login.password}\" required=\"\">\r\n			<div class=\"checkbox mb-3\">\r\n				<label>\r\n          		<input type=\"checkbox\" value=\"remember-me\"/> [[#{login.remember}]]\r\n        </label>\r\n			</div>\r\n			<button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\" th:text=\"#{login.btn}\">Sign in</button>\r\n			<p class=\"mt-5 mb-3 text-muted\">© 2017-2018</p>\r\n			<a class=\"btn btn-sm\">中文</a>\r\n			<a class=\"btn btn-sm\">English</a>\r\n		</form>\r\n\r\n	</body>\r\n\r\n</html>\r\n```\r\n\r\n效果：根据浏览器语言设置的信息切换了国际化；\r\n\r\n\r\n\r\n原理：\r\n\r\n​	国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）；\r\n\r\n```java\r\n		@Bean\r\n		@ConditionalOnMissingBean\r\n		@ConditionalOnProperty(prefix = \"spring.mvc\", name = \"locale\")\r\n		public LocaleResolver localeResolver() {\r\n			if (this.mvcProperties\r\n					.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) {\r\n				return new FixedLocaleResolver(this.mvcProperties.getLocale());\r\n			}\r\n			AcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver();\r\n			localeResolver.setDefaultLocale(this.mvcProperties.getLocale());\r\n			return localeResolver;\r\n		}\r\n默认的就是根据请求头带来的区域信息获取Locale进行国际化\r\n```\r\n\r\n4）、点击链接切换国际化\r\n\r\n```java\r\n/**\r\n * 可以在连接上携带区域信息\r\n */\r\npublic class MyLocaleResolver implements LocaleResolver {\r\n    \r\n    @Override\r\n    public Locale resolveLocale(HttpServletRequest request) {\r\n        String l = request.getParameter(\"l\");\r\n        Locale locale = Locale.getDefault();\r\n        if(!StringUtils.isEmpty(l)){\r\n            String[] split = l.split(\"_\");\r\n            locale = new Locale(split[0],split[1]);\r\n        }\r\n        return locale;\r\n    }\r\n\r\n    @Override\r\n    public void setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale) {\r\n\r\n    }\r\n}\r\n\r\n\r\n @Bean\r\n    public LocaleResolver localeResolver(){\r\n        return new MyLocaleResolver();\r\n    }\r\n}\r\n\r\n\r\n```\r\n\r\n### 3）、登陆\r\n\r\n开发期间模板引擎页面修改以后，要实时生效\r\n\r\n1）、禁用模板引擎的缓存\r\n\r\n```\r\n# 禁用缓存\r\nspring.thymeleaf.cache=false \r\n```\r\n\r\n2）、页面修改完成以后ctrl+f9：重新编译；\r\n\r\n\r\n\r\n登陆错误消息的显示\r\n\r\n```html\r\n<p style=\"color: red\" th:text=\"${msg}\" th:if=\"${not #strings.isEmpty(msg)}\"></p>\r\n```\r\n\r\n\r\n\r\n### 4）、拦截器进行登陆检查\r\n\r\n拦截器\r\n\r\n```java\r\n\r\n/**\r\n * 登陆检查，\r\n */\r\npublic class LoginHandlerInterceptor implements HandlerInterceptor {\r\n    //目标方法执行之前\r\n    @Override\r\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\r\n        Object user = request.getSession().getAttribute(\"loginUser\");\r\n        if(user == null){\r\n            //未登陆，返回登陆页面\r\n            request.setAttribute(\"msg\",\"没有权限请先登陆\");\r\n            request.getRequestDispatcher(\"/index.html\").forward(request,response);\r\n            return false;\r\n        }else{\r\n            //已登陆，放行请求\r\n            return true;\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\r\n\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n注册拦截器\r\n\r\n```java\r\n  //所有的WebMvcConfigurerAdapter组件都会一起起作用\r\n    @Bean //将组件注册在容器\r\n    public WebMvcConfigurerAdapter webMvcConfigurerAdapter(){\r\n        WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() {\r\n            @Override\r\n            public void addViewControllers(ViewControllerRegistry registry) {\r\n                registry.addViewController(\"/\").setViewName(\"login\");\r\n                registry.addViewController(\"/index.html\").setViewName(\"login\");\r\n                registry.addViewController(\"/main.html\").setViewName(\"dashboard\");\r\n            }\r\n\r\n            //注册拦截器\r\n            @Override\r\n            public void addInterceptors(InterceptorRegistry registry) {\r\n                //super.addInterceptors(registry);\r\n                //静态资源；  *.css , *.js\r\n                //SpringBoot已经做好了静态资源映射\r\n                registry.addInterceptor(new LoginHandlerInterceptor()).addPathPatterns(\"/**\")\r\n                        .excludePathPatterns(\"/index.html\",\"/\",\"/user/login\");\r\n            }\r\n        };\r\n        return adapter;\r\n    }\r\n```\r\n\r\n### 5）、CRUD-员工列表\r\n\r\n实验要求：\r\n\r\n1）、RestfulCRUD：CRUD满足Rest风格；\r\n\r\nURI：  /资源名称/资源标识       HTTP请求方式区分对资源CRUD操作\r\n\r\n|      | 普通CRUD（uri来区分操作） | RestfulCRUD       |\r\n| ---- | ------------------------- | ----------------- |\r\n| 查询 | getEmp                    | emp---GET         |\r\n| 添加 | addEmp?xxx                | emp---POST        |\r\n| 修改 | updateEmp?id=xxx&xxx=xx   | emp/{id}---PUT    |\r\n| 删除 | deleteEmp?id=1            | emp/{id}---DELETE |\r\n\r\n2）、实验的请求架构;\r\n\r\n| 实验功能                             | 请求URI | 请求方式 |\r\n| ------------------------------------ | ------- | -------- |\r\n| 查询所有员工                         | emps    | GET      |\r\n| 查询某个员工(来到修改页面)           | emp/1   | GET      |\r\n| 来到添加页面                         | emp     | GET      |\r\n| 添加员工                             | emp     | POST     |\r\n| 来到修改页面（查出员工进行信息回显） | emp/1   | GET      |\r\n| 修改员工                             | emp     | PUT      |\r\n| 删除员工                             | emp/1   | DELETE   |\r\n\r\n3）、员工列表：\r\n\r\n#### thymeleaf公共页面元素抽取\r\n\r\n```html\r\n1、抽取公共片段\r\n<div th:fragment=\"copy\">\r\n&copy; 2011 The Good Thymes Virtual Grocery\r\n</div>\r\n\r\n2、引入公共片段\r\n<div th:insert=\"~{footer :: copy}\"></div>\r\n~{templatename::selector}：模板名::选择器\r\n~{templatename::fragmentname}:模板名::片段名\r\n\r\n3、默认效果：\r\ninsert的公共片段在div标签中\r\n如果使用th:insert等属性进行引入，可以不用写~{}：\r\n行内写法可以加上：[[~{}]];[(~{})]；\r\n```\r\n\r\n\r\n\r\n三种引入公共片段的th属性：\r\n\r\n**th:insert**：将公共片段整个插入到声明引入的元素中\r\n\r\n**th:replace**：将声明引入的元素替换为公共片段\r\n\r\n**th:include**：将被引入的片段的内容包含进这个标签中\r\n\r\n\r\n\r\n```html\r\n<footer th:fragment=\"copy\">\r\n&copy; 2011 The Good Thymes Virtual Grocery\r\n</footer>\r\n\r\n引入方式\r\n<div th:insert=\"footer :: copy\"></div>\r\n<div th:replace=\"footer :: copy\"></div>\r\n<div th:include=\"footer :: copy\"></div>\r\n\r\n效果\r\n<div>\r\n    <footer>\r\n    &copy; 2011 The Good Thymes Virtual Grocery\r\n    </footer>\r\n</div>\r\n\r\n<footer>\r\n&copy; 2011 The Good Thymes Virtual Grocery\r\n</footer>\r\n\r\n<div>\r\n&copy; 2011 The Good Thymes Virtual Grocery\r\n</div>\r\n```\r\n\r\n\r\n\r\n引入片段的时候传入参数： \r\n\r\n```html\r\n\r\n<nav class=\"col-md-2 d-none d-md-block bg-light sidebar\" id=\"sidebar\">\r\n    <div class=\"sidebar-sticky\">\r\n        <ul class=\"nav flex-column\">\r\n            <li class=\"nav-item\">\r\n                <a class=\"nav-link active\"\r\n                   th:class=\"${activeUri==\'main.html\'?\'nav-link active\':\'nav-link\'}\"\r\n                   href=\"#\" th:href=\"@{/main.html}\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-home\">\r\n                        <path d=\"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"></path>\r\n                        <polyline points=\"9 22 9 12 15 12 15 22\"></polyline>\r\n                    </svg>\r\n                    Dashboard <span class=\"sr-only\">(current)</span>\r\n                </a>\r\n            </li>\r\n\r\n<!--引入侧边栏;传入参数-->\r\n<div th:replace=\"commons/bar::#sidebar(activeUri=\'emps\')\"></div>\r\n```\r\n\r\n### 6）、CRUD-员工添加\r\n\r\n添加页面\r\n\r\n```html\r\n<form>\r\n    <div class=\"form-group\">\r\n        <label>LastName</label>\r\n        <input type=\"text\" class=\"form-control\" placeholder=\"zhangsan\">\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label>Email</label>\r\n        <input type=\"email\" class=\"form-control\" placeholder=\"zhangsan@atguigu.com\">\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label>Gender</label><br/>\r\n        <div class=\"form-check form-check-inline\">\r\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\"  value=\"1\">\r\n            <label class=\"form-check-label\">男</label>\r\n        </div>\r\n        <div class=\"form-check form-check-inline\">\r\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\"  value=\"0\">\r\n            <label class=\"form-check-label\">女</label>\r\n        </div>\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label>department</label>\r\n        <select class=\"form-control\">\r\n            <option>1</option>\r\n            <option>2</option>\r\n            <option>3</option>\r\n            <option>4</option>\r\n            <option>5</option>\r\n        </select>\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label>Birth</label>\r\n        <input type=\"text\" class=\"form-control\" placeholder=\"zhangsan\">\r\n    </div>\r\n    <button type=\"submit\" class=\"btn btn-primary\">添加</button>\r\n</form>\r\n```\r\n\r\n提交的数据格式不对：生日：日期；\r\n\r\n2017-12-12；2017/12/12；2017.12.12；\r\n\r\n日期的格式化；SpringMVC将页面提交的值需要转换为指定的类型;\r\n\r\n2017-12-12---Date； 类型转换，格式化;\r\n\r\n默认日期是按照/的方式；\r\n\r\n### 7）、CRUD-员工修改\r\n\r\n修改添加二合一表单\r\n\r\n```html\r\n<!--需要区分是员工修改还是添加；-->\r\n<form th:action=\"@{/emp}\" method=\"post\">\r\n    <!--发送put请求修改员工数据-->\r\n    <!--\r\n1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）\r\n2、页面创建一个post表单\r\n3、创建一个input项，name=\"_method\";值就是我们指定的请求方式\r\n-->\r\n    <input type=\"hidden\" name=\"_method\" value=\"put\" th:if=\"${emp!=null}\"/>\r\n    <input type=\"hidden\" name=\"id\" th:if=\"${emp!=null}\" th:value=\"${emp.id}\">\r\n    <div class=\"form-group\">\r\n        <label>LastName</label>\r\n        <input name=\"lastName\" type=\"text\" class=\"form-control\" placeholder=\"zhangsan\" th:value=\"${emp!=null}?${emp.lastName}\">\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label>Email</label>\r\n        <input name=\"email\" type=\"email\" class=\"form-control\" placeholder=\"zhangsan@atguigu.com\" th:value=\"${emp!=null}?${emp.email}\">\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label>Gender</label><br/>\r\n        <div class=\"form-check form-check-inline\">\r\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"1\" th:checked=\"${emp!=null}?${emp.gender==1}\">\r\n            <label class=\"form-check-label\">男</label>\r\n        </div>\r\n        <div class=\"form-check form-check-inline\">\r\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"0\" th:checked=\"${emp!=null}?${emp.gender==0}\">\r\n            <label class=\"form-check-label\">女</label>\r\n        </div>\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label>department</label>\r\n        <!--提交的是部门的id-->\r\n        <select class=\"form-control\" name=\"department.id\">\r\n            <option th:selected=\"${emp!=null}?${dept.id == emp.department.id}\" th:value=\"${dept.id}\" th:each=\"dept:${depts}\" th:text=\"${dept.departmentName}\">1</option>\r\n        </select>\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label>Birth</label>\r\n        <input name=\"birth\" type=\"text\" class=\"form-control\" placeholder=\"zhangsan\" th:value=\"${emp!=null}?${#dates.format(emp.birth, \'yyyy-MM-dd HH:mm\')}\">\r\n    </div>\r\n    <button type=\"submit\" class=\"btn btn-primary\" th:text=\"${emp!=null}?\'修改\':\'添加\'\">添加</button>\r\n</form>\r\n```\r\n\r\n### 8）、CRUD-员工删除\r\n\r\n```html\r\n<tr th:each=\"emp:${emps}\">\r\n    <td th:text=\"${emp.id}\"></td>\r\n    <td>[[${emp.lastName}]]</td>\r\n    <td th:text=\"${emp.email}\"></td>\r\n    <td th:text=\"${emp.gender}==0?\'女\':\'男\'\"></td>\r\n    <td th:text=\"${emp.department.departmentName}\"></td>\r\n    <td th:text=\"${#dates.format(emp.birth, \'yyyy-MM-dd HH:mm\')}\"></td>\r\n    <td>\r\n        <a class=\"btn btn-sm btn-primary\" th:href=\"@{/emp/}+${emp.id}\">编辑</a>\r\n        <button th:attr=\"del_uri=@{/emp/}+${emp.id}\" class=\"btn btn-sm btn-danger deleteBtn\">删除</button>\r\n    </td>\r\n</tr>\r\n\r\n\r\n<script>\r\n    $(\".deleteBtn\").click(function(){\r\n        //删除当前员工的\r\n        $(\"#deleteEmpForm\").attr(\"action\",$(this).attr(\"del_uri\")).submit();\r\n        return false;\r\n    });\r\n</script>\r\n```\r\n\r\n\r\n\r\n## 7、错误处理机制\r\n\r\n### 1）、SpringBoot默认的错误处理机制\r\n\r\n默认效果：\r\n\r\n​		1）、浏览器，返回一个默认的错误页面\r\n\r\n![](images/搜狗截图20180226173408.png)\r\n\r\n  浏览器发送请求的请求头：\r\n\r\n![](images/搜狗截图20180226180347.png)\r\n\r\n​		2）、如果是其他客户端，默认响应一个json数据\r\n\r\n![](images/搜狗截图20180226173527.png)\r\n\r\n​		![](images/搜狗截图20180226180504.png)\r\n\r\n原理：\r\n\r\n​	可以参照ErrorMvcAutoConfiguration；错误处理的自动配置；\r\n\r\n  	给容器中添加了以下组件\r\n\r\n​	1、DefaultErrorAttributes：\r\n\r\n```java\r\n帮我们在页面共享信息；\r\n@Override\r\n	public Map<String, Object> getErrorAttributes(RequestAttributes requestAttributes,\r\n			boolean includeStackTrace) {\r\n		Map<String, Object> errorAttributes = new LinkedHashMap<String, Object>();\r\n		errorAttributes.put(\"timestamp\", new Date());\r\n		addStatus(errorAttributes, requestAttributes);\r\n		addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);\r\n		addPath(errorAttributes, requestAttributes);\r\n		return errorAttributes;\r\n	}\r\n```\r\n\r\n\r\n\r\n​	2、BasicErrorController：处理默认/error请求\r\n\r\n```java\r\n@Controller\r\n@RequestMapping(\"${server.error.path:${error.path:/error}}\")\r\npublic class BasicErrorController extends AbstractErrorController {\r\n    \r\n    @RequestMapping(produces = \"text/html\")//产生html类型的数据；浏览器发送的请求来到这个方法处理\r\n	public ModelAndView errorHtml(HttpServletRequest request,\r\n			HttpServletResponse response) {\r\n		HttpStatus status = getStatus(request);\r\n		Map<String, Object> model = Collections.unmodifiableMap(getErrorAttributes(\r\n				request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));\r\n		response.setStatus(status.value());\r\n        \r\n        //去哪个页面作为错误页面；包含页面地址和页面内容\r\n		ModelAndView modelAndView = resolveErrorView(request, response, status, model);\r\n		return (modelAndView == null ? new ModelAndView(\"error\", model) : modelAndView);\r\n	}\r\n\r\n	@RequestMapping\r\n	@ResponseBody    //产生json数据，其他客户端来到这个方法处理；\r\n	public ResponseEntity<Map<String, Object>> error(HttpServletRequest request) {\r\n		Map<String, Object> body = getErrorAttributes(request,\r\n				isIncludeStackTrace(request, MediaType.ALL));\r\n		HttpStatus status = getStatus(request);\r\n		return new ResponseEntity<Map<String, Object>>(body, status);\r\n	}\r\n```\r\n\r\n\r\n\r\n​	3、ErrorPageCustomizer：\r\n\r\n```java\r\n	@Value(\"${error.path:/error}\")\r\n	private String path = \"/error\";  系统出现错误以后来到error请求进行处理；（web.xml注册的错误页面规则）\r\n```\r\n\r\n\r\n\r\n​	4、DefaultErrorViewResolver：\r\n\r\n```java\r\n@Override\r\n	public ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status,\r\n			Map<String, Object> model) {\r\n		ModelAndView modelAndView = resolve(String.valueOf(status), model);\r\n		if (modelAndView == null && SERIES_VIEWS.containsKey(status.series())) {\r\n			modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);\r\n		}\r\n		return modelAndView;\r\n	}\r\n\r\n	private ModelAndView resolve(String viewName, Map<String, Object> model) {\r\n        //默认SpringBoot可以去找到一个页面？  error/404\r\n		String errorViewName = \"error/\" + viewName;\r\n        \r\n        //模板引擎可以解析这个页面地址就用模板引擎解析\r\n		TemplateAvailabilityProvider provider = this.templateAvailabilityProviders\r\n				.getProvider(errorViewName, this.applicationContext);\r\n		if (provider != null) {\r\n            //模板引擎可用的情况下返回到errorViewName指定的视图地址\r\n			return new ModelAndView(errorViewName, model);\r\n		}\r\n        //模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面   error/404.html\r\n		return resolveResource(errorViewName, model);\r\n	}\r\n```\r\n\r\n\r\n\r\n​	步骤：\r\n\r\n​		一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/error请求；就会被**BasicErrorController**处理；\r\n\r\n​		1）响应页面；去哪个页面是由**DefaultErrorViewResolver**解析得到的；\r\n\r\n```java\r\nprotected ModelAndView resolveErrorView(HttpServletRequest request,\r\n      HttpServletResponse response, HttpStatus status, Map<String, Object> model) {\r\n    //所有的ErrorViewResolver得到ModelAndView\r\n   for (ErrorViewResolver resolver : this.errorViewResolvers) {\r\n      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);\r\n      if (modelAndView != null) {\r\n         return modelAndView;\r\n      }\r\n   }\r\n   return null;\r\n}\r\n```\r\n\r\n### 2）、如果定制错误响应：\r\n\r\n#### 	**1）、如何定制错误的页面；**\r\n\r\n​			**1）、有模板引擎的情况下；error/状态码;** 【将错误页面命名为  错误状态码.html 放在模板引擎文件夹里面的 error文件夹下】，发生此状态码的错误就会来到  对应的页面；\r\n\r\n​			我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）；		\r\n\r\n​			页面能获取的信息；\r\n\r\n​				timestamp：时间戳\r\n\r\n​				status：状态码\r\n\r\n​				error：错误提示\r\n\r\n​				exception：异常对象\r\n\r\n​				message：异常消息\r\n\r\n​				errors：JSR303数据校验的错误都在这里\r\n\r\n​			2）、没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找；\r\n\r\n​			3）、以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面；\r\n\r\n\r\n\r\n#### 	2）、如何定制错误的json数据；\r\n\r\n​		1）、自定义异常处理&返回定制json数据；\r\n\r\n```java\r\n@ControllerAdvice\r\npublic class MyExceptionHandler {\r\n\r\n    @ResponseBody\r\n    @ExceptionHandler(UserNotExistException.class)\r\n    public Map<String,Object> handleException(Exception e){\r\n        Map<String,Object> map = new HashMap<>();\r\n        map.put(\"code\",\"user.notexist\");\r\n        map.put(\"message\",e.getMessage());\r\n        return map;\r\n    }\r\n}\r\n//没有自适应效果...\r\n```\r\n\r\n\r\n\r\n​		2）、转发到/error进行自适应响应效果处理\r\n\r\n```java\r\n @ExceptionHandler(UserNotExistException.class)\r\n    public String handleException(Exception e, HttpServletRequest request){\r\n        Map<String,Object> map = new HashMap<>();\r\n        //传入我们自己的错误状态码  4xx 5xx，否则就不会进入定制错误页面的解析流程\r\n        /**\r\n         * Integer statusCode = (Integer) request\r\n         .getAttribute(\"javax.servlet.error.status_code\");\r\n         */\r\n        request.setAttribute(\"javax.servlet.error.status_code\",500);\r\n        map.put(\"code\",\"user.notexist\");\r\n        map.put(\"message\",e.getMessage());\r\n        //转发到/error\r\n        return \"forward:/error\";\r\n    }\r\n```\r\n\r\n#### 	3）、将我们的定制数据携带出去；\r\n\r\n出现错误以后，会来到/error请求，会被BasicErrorController处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController（ErrorController）规定的方法）；\r\n\r\n​	1、完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中；\r\n\r\n​	2、页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到；\r\n\r\n​			容器中DefaultErrorAttributes.getErrorAttributes()；默认进行数据处理的；\r\n\r\n自定义ErrorAttributes\r\n\r\n```java\r\n//给容器中加入我们自己定义的ErrorAttributes\r\n@Component\r\npublic class MyErrorAttributes extends DefaultErrorAttributes {\r\n\r\n    @Override\r\n    public Map<String, Object> getErrorAttributes(RequestAttributes requestAttributes, boolean includeStackTrace) {\r\n        Map<String, Object> map = super.getErrorAttributes(requestAttributes, includeStackTrace);\r\n        map.put(\"company\",\"atguigu\");\r\n        return map;\r\n    }\r\n}\r\n```\r\n\r\n最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容，\r\n\r\n![](images/搜狗截图20180228135513.png)\r\n\r\n\r\n\r\n## 8、配置嵌入式Servlet容器\r\n\r\nSpringBoot默认使用Tomcat作为嵌入式的Servlet容器；\r\n\r\n![](images/搜狗截图20180301142915.png)\r\n\r\n\r\n\r\n问题？\r\n\r\n### 1）、如何定制和修改Servlet容器的相关配置；\r\n\r\n1、修改和server有关的配置（ServerProperties【也是EmbeddedServletContainerCustomizer】）；\r\n\r\n```properties\r\nserver.port=8081\r\nserver.context-path=/crud\r\n\r\nserver.tomcat.uri-encoding=UTF-8\r\n\r\n//通用的Servlet容器设置\r\nserver.xxx\r\n//Tomcat的设置\r\nserver.tomcat.xxx\r\n```\r\n\r\n2、编写一个**EmbeddedServletContainerCustomizer**：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置\r\n\r\n```java\r\n@Bean  //一定要将这个定制器加入到容器中\r\npublic EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer(){\r\n    return new EmbeddedServletContainerCustomizer() {\r\n\r\n        //定制嵌入式的Servlet容器相关的规则\r\n        @Override\r\n        public void customize(ConfigurableEmbeddedServletContainer container) {\r\n            container.setPort(8083);\r\n        }\r\n    };\r\n}\r\n\r\n\r\n2.0以上\r\n        @Bean\r\n    public WebServerFactoryCustomizer<ConfigurableWebServerFactory> webServerFactoryCustomizer() {\r\n        return new WebServerFactoryCustomizer<ConfigurableWebServerFactory>() {\r\n            @Override\r\n            public void customize(ConfigurableWebServerFactory factory) {\r\n                factory.setPort(8083);\r\n            }\r\n        };\r\n    }\r\n```\r\n\r\n### 2）、注册Servlet三大组件【Servlet、Filter、Listener】\r\n\r\n由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。\r\n\r\n注册三大组件用以下方式\r\n\r\nServletRegistrationBean\r\n\r\n```java\r\n//注册三大组件\r\n@Bean\r\npublic ServletRegistrationBean myServlet(){\r\n    ServletRegistrationBean registrationBean = new ServletRegistrationBean(new MyServlet(),\"/myServlet\");\r\n    return registrationBean;\r\n}\r\n\r\n```\r\n\r\nFilterRegistrationBean\r\n\r\n```java\r\n@Bean\r\npublic FilterRegistrationBean myFilter(){\r\n    FilterRegistrationBean registrationBean = new FilterRegistrationBean();\r\n    registrationBean.setFilter(new MyFilter());\r\n    registrationBean.setUrlPatterns(Arrays.asList(\"/hello\",\"/myServlet\"));\r\n    return registrationBean;\r\n}\r\n```\r\n\r\nServletListenerRegistrationBean\r\n\r\n```java\r\n@Bean\r\npublic ServletListenerRegistrationBean myListener(){\r\n    ServletListenerRegistrationBean<MyListener> registrationBean = new ServletListenerRegistrationBean<>(new MyListener());\r\n    return registrationBean;\r\n}\r\n```\r\n\r\n\r\n\r\nSpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet；\r\n\r\nDispatcherServletAutoConfiguration中：\r\n\r\n```java\r\n@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)\r\n@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\r\npublic ServletRegistrationBean dispatcherServletRegistration(\r\n      DispatcherServlet dispatcherServlet) {\r\n   ServletRegistrationBean registration = new ServletRegistrationBean(\r\n         dispatcherServlet, this.serverProperties.getServletMapping());\r\n    //默认拦截： /  所有请求；包静态资源，但是不拦截jsp请求；   /*会拦截jsp\r\n    //可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径\r\n    \r\n   registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\r\n   registration.setLoadOnStartup(\r\n         this.webMvcProperties.getServlet().getLoadOnStartup());\r\n   if (this.multipartConfig != null) {\r\n      registration.setMultipartConfig(this.multipartConfig);\r\n   }\r\n   return registration;\r\n}\r\n\r\n```\r\n\r\n2）、SpringBoot能不能支持其他的Servlet容器；\r\n\r\n### 3）、替换为其他嵌入式Servlet容器\r\n\r\n![](images/搜狗截图20180302114401.png)\r\n\r\n默认支持：\r\n\r\nTomcat（默认使用）\r\n\r\n```xml\r\n<dependency>\r\n   <groupId>org.springframework.boot</groupId>\r\n   <artifactId>spring-boot-starter-web</artifactId>\r\n   引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器；\r\n</dependency>\r\n```\r\n\r\nJetty\r\n\r\n```xml\r\n<!-- 引入web模块 -->\r\n<dependency>\r\n   <groupId>org.springframework.boot</groupId>\r\n   <artifactId>spring-boot-starter-web</artifactId>\r\n   <exclusions>\r\n      <exclusion>\r\n         <artifactId>spring-boot-starter-tomcat</artifactId>\r\n         <groupId>org.springframework.boot</groupId>\r\n      </exclusion>\r\n   </exclusions>\r\n</dependency>\r\n\r\n<!--引入其他的Servlet容器-->\r\n<dependency>\r\n   <artifactId>spring-boot-starter-jetty</artifactId>\r\n   <groupId>org.springframework.boot</groupId>\r\n</dependency>\r\n```\r\n\r\nUndertow\r\n\r\n```xml\r\n<!-- 引入web模块 -->\r\n<dependency>\r\n   <groupId>org.springframework.boot</groupId>\r\n   <artifactId>spring-boot-starter-web</artifactId>\r\n   <exclusions>\r\n      <exclusion>\r\n         <artifactId>spring-boot-starter-tomcat</artifactId>\r\n         <groupId>org.springframework.boot</groupId>\r\n      </exclusion>\r\n   </exclusions>\r\n</dependency>\r\n\r\n<!--引入其他的Servlet容器-->\r\n<dependency>\r\n   <artifactId>spring-boot-starter-undertow</artifactId>\r\n   <groupId>org.springframework.boot</groupId>\r\n</dependency>\r\n```\r\n\r\n### 4）、嵌入式Servlet容器自动配置原理；\r\n\r\n\r\n\r\nEmbeddedServletContainerAutoConfiguration：嵌入式的Servlet容器自动配置？\r\n\r\n```java\r\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\r\n@Configuration\r\n@ConditionalOnWebApplication\r\n@Import(BeanPostProcessorsRegistrar.class)\r\n//导入BeanPostProcessorsRegistrar：Spring注解版；给容器中导入一些组件\r\n//导入了EmbeddedServletContainerCustomizerBeanPostProcessor：\r\n//后置处理器：bean初始化前后（创建完对象，还没赋值赋值）执行初始化工作\r\npublic class EmbeddedServletContainerAutoConfiguration {\r\n    \r\n    @Configuration\r\n	@ConditionalOnClass({ Servlet.class, Tomcat.class })//判断当前是否引入了Tomcat依赖；\r\n	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)//判断当前容器没有用户自己定义EmbeddedServletContainerFactory：嵌入式的Servlet容器工厂；作用：创建嵌入式的Servlet容器\r\n	public static class EmbeddedTomcat {\r\n\r\n		@Bean\r\n		public TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\r\n			return new TomcatEmbeddedServletContainerFactory();\r\n		}\r\n\r\n	}\r\n    \r\n    /**\r\n	 * Nested configuration if Jetty is being used.\r\n	 */\r\n	@Configuration\r\n	@ConditionalOnClass({ Servlet.class, Server.class, Loader.class,\r\n			WebAppContext.class })\r\n	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\r\n	public static class EmbeddedJetty {\r\n\r\n		@Bean\r\n		public JettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory() {\r\n			return new JettyEmbeddedServletContainerFactory();\r\n		}\r\n\r\n	}\r\n\r\n	/**\r\n	 * Nested configuration if Undertow is being used.\r\n	 */\r\n	@Configuration\r\n	@ConditionalOnClass({ Servlet.class, Undertow.class, SslClientAuthMode.class })\r\n	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\r\n	public static class EmbeddedUndertow {\r\n\r\n		@Bean\r\n		public UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory() {\r\n			return new UndertowEmbeddedServletContainerFactory();\r\n		}\r\n\r\n	}\r\n```\r\n\r\n1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）\r\n\r\n```java\r\npublic interface EmbeddedServletContainerFactory {\r\n\r\n   //获取嵌入式的Servlet容器\r\n   EmbeddedServletContainer getEmbeddedServletContainer(\r\n         ServletContextInitializer... initializers);\r\n\r\n}\r\n```\r\n\r\n![](images/搜狗截图20180302144835.png)\r\n\r\n2）、EmbeddedServletContainer：（嵌入式的Servlet容器）\r\n\r\n![](images/搜狗截图20180302144910.png)\r\n\r\n\r\n\r\n3）、以**TomcatEmbeddedServletContainerFactory**为例\r\n\r\n```java\r\n@Override\r\npublic EmbeddedServletContainer getEmbeddedServletContainer(\r\n      ServletContextInitializer... initializers) {\r\n    //创建一个Tomcat\r\n   Tomcat tomcat = new Tomcat();\r\n    \r\n    //配置Tomcat的基本环节\r\n   File baseDir = (this.baseDirectory != null ? this.baseDirectory\r\n         : createTempDir(\"tomcat\"));\r\n   tomcat.setBaseDir(baseDir.getAbsolutePath());\r\n   Connector connector = new Connector(this.protocol);\r\n   tomcat.getService().addConnector(connector);\r\n   customizeConnector(connector);\r\n   tomcat.setConnector(connector);\r\n   tomcat.getHost().setAutoDeploy(false);\r\n   configureEngine(tomcat.getEngine());\r\n   for (Connector additionalConnector : this.additionalTomcatConnectors) {\r\n      tomcat.getService().addConnector(additionalConnector);\r\n   }\r\n   prepareContext(tomcat.getHost(), initializers);\r\n    \r\n    //将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器\r\n   return getTomcatEmbeddedServletContainer(tomcat);\r\n}\r\n```\r\n\r\n4）、我们对嵌入式容器的配置修改是怎么生效？\r\n\r\n```\r\nServerProperties、EmbeddedServletContainerCustomizer\r\n```\r\n\r\n\r\n\r\n**EmbeddedServletContainerCustomizer**：定制器帮我们修改了Servlet容器的配置？\r\n\r\n怎么修改的原理？\r\n\r\n5）、容器中导入了**EmbeddedServletContainerCustomizerBeanPostProcessor**\r\n\r\n```java\r\n//初始化之前\r\n@Override\r\npublic Object postProcessBeforeInitialization(Object bean, String beanName)\r\n      throws BeansException {\r\n    //如果当前初始化的是一个ConfigurableEmbeddedServletContainer类型的组件\r\n   if (bean instanceof ConfigurableEmbeddedServletContainer) {\r\n       //\r\n      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);\r\n   }\r\n   return bean;\r\n}\r\n\r\nprivate void postProcessBeforeInitialization(\r\n			ConfigurableEmbeddedServletContainer bean) {\r\n    //获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值；\r\n    for (EmbeddedServletContainerCustomizer customizer : getCustomizers()) {\r\n        customizer.customize(bean);\r\n    }\r\n}\r\n\r\nprivate Collection<EmbeddedServletContainerCustomizer> getCustomizers() {\r\n    if (this.customizers == null) {\r\n        // Look up does not include the parent context\r\n        this.customizers = new ArrayList<EmbeddedServletContainerCustomizer>(\r\n            this.beanFactory\r\n            //从容器中获取所有这葛类型的组件：EmbeddedServletContainerCustomizer\r\n            //定制Servlet容器，给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件\r\n            .getBeansOfType(EmbeddedServletContainerCustomizer.class,\r\n                            false, false)\r\n            .values());\r\n        Collections.sort(this.customizers, AnnotationAwareOrderComparator.INSTANCE);\r\n        this.customizers = Collections.unmodifiableList(this.customizers);\r\n    }\r\n    return this.customizers;\r\n}\r\n\r\nServerProperties也是定制器\r\n```\r\n\r\n步骤：\r\n\r\n1）、SpringBoot根据导入的依赖情况，给容器中添加相应的EmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】\r\n\r\n2）、容器中某个组件要创建对象就会惊动后置处理器；EmbeddedServletContainerCustomizerBeanPostProcessor；\r\n\r\n只要是嵌入式的Servlet容器工厂，后置处理器就工作；\r\n\r\n3）、后置处理器，从容器中获取所有的**EmbeddedServletContainerCustomizer**，调用定制器的定制方法\r\n\r\n\r\n\r\n###5）、嵌入式Servlet容器启动原理；\r\n\r\n什么时候创建嵌入式的Servlet容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat；\r\n\r\n获取嵌入式的Servlet容器工厂：\r\n\r\n1）、SpringBoot应用启动运行run方法\r\n\r\n2）、refreshContext(context);SpringBoot刷新IOC容器【创建IOC容器对象，并初始化容器，创建容器中的每一个组件】；如果是web应用创建**AnnotationConfigEmbeddedWebApplicationContext**，否则：**AnnotationConfigApplicationContext**\r\n\r\n3）、refresh(context);**刷新刚才创建好的ioc容器；**\r\n\r\n```java\r\npublic void refresh() throws BeansException, IllegalStateException {\r\n   synchronized (this.startupShutdownMonitor) {\r\n      // Prepare this context for refreshing.\r\n      prepareRefresh();\r\n\r\n      // Tell the subclass to refresh the internal bean factory.\r\n      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\r\n\r\n      // Prepare the bean factory for use in this context.\r\n      prepareBeanFactory(beanFactory);\r\n\r\n      try {\r\n         // Allows post-processing of the bean factory in context subclasses.\r\n         postProcessBeanFactory(beanFactory);\r\n\r\n         // Invoke factory processors registered as beans in the context.\r\n         invokeBeanFactoryPostProcessors(beanFactory);\r\n\r\n         // Register bean processors that intercept bean creation.\r\n         registerBeanPostProcessors(beanFactory);\r\n\r\n         // Initialize message source for this context.\r\n         initMessageSource();\r\n\r\n         // Initialize event multicaster for this context.\r\n         initApplicationEventMulticaster();\r\n\r\n         // Initialize other special beans in specific context subclasses.\r\n         onRefresh();\r\n\r\n         // Check for listener beans and register them.\r\n         registerListeners();\r\n\r\n         // Instantiate all remaining (non-lazy-init) singletons.\r\n         finishBeanFactoryInitialization(beanFactory);\r\n\r\n         // Last step: publish corresponding event.\r\n         finishRefresh();\r\n      }\r\n\r\n      catch (BeansException ex) {\r\n         if (logger.isWarnEnabled()) {\r\n            logger.warn(\"Exception encountered during context initialization - \" +\r\n                  \"cancelling refresh attempt: \" + ex);\r\n         }\r\n\r\n         // Destroy already created singletons to avoid dangling resources.\r\n         destroyBeans();\r\n\r\n         // Reset \'active\' flag.\r\n         cancelRefresh(ex);\r\n\r\n         // Propagate exception to caller.\r\n         throw ex;\r\n      }\r\n\r\n      finally {\r\n         // Reset common introspection caches in Spring\'s core, since we\r\n         // might not ever need metadata for singleton beans anymore...\r\n         resetCommonCaches();\r\n      }\r\n   }\r\n}\r\n```\r\n\r\n4）、  onRefresh(); web的ioc容器重写了onRefresh方法\r\n\r\n5）、webioc容器会创建嵌入式的Servlet容器；**createEmbeddedServletContainer**();\r\n\r\n**6）、获取嵌入式的Servlet容器工厂：**\r\n\r\nEmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();\r\n\r\n​	从ioc容器中获取EmbeddedServletContainerFactory 组件；**TomcatEmbeddedServletContainerFactory**创建对象，后置处理器一看是这个对象，就获取所有的定制器来先定制Servlet容器的相关配置；\r\n\r\n7）、**使用容器工厂获取嵌入式的Servlet容器**：this.embeddedServletContainer = containerFactory      .getEmbeddedServletContainer(getSelfInitializer());\r\n\r\n8）、嵌入式的Servlet容器创建对象并启动Servlet容器；\r\n\r\n**先启动嵌入式的Servlet容器，再将ioc容器中剩下没有创建出的对象获取出来；**\r\n\r\n**==IOC容器启动创建嵌入式的Servlet容器==**\r\n\r\n\r\n\r\n## 9、使用外置的Servlet容器\r\n\r\n嵌入式Servlet容器：应用打成可执行的jar\r\n\r\n​		优点：简单、便携；\r\n\r\n​		缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义EmbeddedServletContainerCustomizer】，自己编写嵌入式Servlet容器的创建工厂【EmbeddedServletContainerFactory】）；\r\n\r\n\r\n\r\n外置的Servlet容器：外面安装Tomcat---应用war包的方式打包；\r\n\r\n### 步骤\r\n\r\n1）、必须创建一个war项目；（利用idea创建好目录结构）\r\n\r\n2）、将嵌入式的Tomcat指定为provided；\r\n\r\n```xml\r\n<dependency>\r\n   <groupId>org.springframework.boot</groupId>\r\n   <artifactId>spring-boot-starter-tomcat</artifactId>\r\n   <scope>provided</scope>\r\n</dependency>\r\n```\r\n\r\n3）、必须编写一个**SpringBootServletInitializer**的子类，并调用configure方法\r\n\r\n```java\r\npublic class ServletInitializer extends SpringBootServletInitializer {\r\n\r\n   @Override\r\n   protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\r\n       //传入SpringBoot应用的主程序\r\n      return application.sources(SpringBoot04WebJspApplication.class);\r\n   }\r\n\r\n}\r\n```\r\n\r\n4）、启动服务器就可以使用；\r\n\r\n### 原理\r\n\r\njar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet容器；\r\n\r\nwar包：启动服务器，**服务器启动SpringBoot应用**【SpringBootServletInitializer】，启动ioc容器；\r\n\r\n\r\n\r\nservlet3.0（Spring注解版）：\r\n\r\n8.2.4 Shared libraries / runtimes pluggability：\r\n\r\n规则：\r\n\r\n​	1）、服务器启动（web应用启动）会创建当前web应用里面每一个jar包里面ServletContainerInitializer实例：\r\n\r\n​	2）、ServletContainerInitializer的实现放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainerInitializer的文件，内容就是ServletContainerInitializer的实现类的全类名\r\n\r\n​	3）、还可以使用@HandlesTypes，在应用启动的时候加载我们感兴趣的类；\r\n\r\n\r\n\r\n流程：\r\n\r\n1）、启动Tomcat\r\n\r\n2）、org\\springframework\\spring-web\\4.3.14.RELEASE\\spring-web-4.3.14.RELEASE.jar!\\META-INF\\services\\javax.servlet.ServletContainerInitializer：\r\n\r\nSpring的web模块里面有这个文件：**org.springframework.web.SpringServletContainerInitializer**\r\n\r\n3）、SpringServletContainerInitializer将@HandlesTypes(WebApplicationInitializer.class)标注的所有这个类型的类都传入到onStartup方法的Set<Class<?>>；为这些WebApplicationInitializer类型的类创建实例；\r\n\r\n4）、每一个WebApplicationInitializer都调用自己的onStartup；\r\n\r\n![](images/搜狗截图20180302221835.png)\r\n\r\n5）、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法\r\n\r\n6）、SpringBootServletInitializer实例执行onStartup的时候会createRootApplicationContext；创建容器\r\n\r\n```java\r\nprotected WebApplicationContext createRootApplicationContext(\r\n      ServletContext servletContext) {\r\n    //1、创建SpringApplicationBuilder\r\n   SpringApplicationBuilder builder = createSpringApplicationBuilder();\r\n   StandardServletEnvironment environment = new StandardServletEnvironment();\r\n   environment.initPropertySources(servletContext, null);\r\n   builder.environment(environment);\r\n   builder.main(getClass());\r\n   ApplicationContext parent = getExistingRootWebApplicationContext(servletContext);\r\n   if (parent != null) {\r\n      this.logger.info(\"Root context already created (using as parent).\");\r\n      servletContext.setAttribute(\r\n            WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, null);\r\n      builder.initializers(new ParentContextApplicationContextInitializer(parent));\r\n   }\r\n   builder.initializers(\r\n         new ServletContextApplicationContextInitializer(servletContext));\r\n   builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);\r\n    \r\n    //调用configure方法，子类重写了这个方法，将SpringBoot的主程序类传入了进来\r\n   builder = configure(builder);\r\n    \r\n    //使用builder创建一个Spring应用\r\n   SpringApplication application = builder.build();\r\n   if (application.getSources().isEmpty() && AnnotationUtils\r\n         .findAnnotation(getClass(), Configuration.class) != null) {\r\n      application.getSources().add(getClass());\r\n   }\r\n   Assert.state(!application.getSources().isEmpty(),\r\n         \"No SpringApplication sources have been defined. Either override the \"\r\n               + \"configure method or add an @Configuration annotation\");\r\n   // Ensure error pages are registered\r\n   if (this.registerErrorPageFilter) {\r\n      application.getSources().add(ErrorPageFilterConfiguration.class);\r\n   }\r\n    //启动Spring应用\r\n   return run(application);\r\n}\r\n```\r\n\r\n7）、Spring的应用就启动并且创建IOC容器\r\n\r\n```java\r\npublic ConfigurableApplicationContext run(String... args) {\r\n   StopWatch stopWatch = new StopWatch();\r\n   stopWatch.start();\r\n   ConfigurableApplicationContext context = null;\r\n   FailureAnalyzers analyzers = null;\r\n   configureHeadlessProperty();\r\n   SpringApplicationRunListeners listeners = getRunListeners(args);\r\n   listeners.starting();\r\n   try {\r\n      ApplicationArguments applicationArguments = new DefaultApplicationArguments(\r\n            args);\r\n      ConfigurableEnvironment environment = prepareEnvironment(listeners,\r\n            applicationArguments);\r\n      Banner printedBanner = printBanner(environment);\r\n      context = createApplicationContext();\r\n      analyzers = new FailureAnalyzers(context);\r\n      prepareContext(context, environment, listeners, applicationArguments,\r\n            printedBanner);\r\n       \r\n       //刷新IOC容器\r\n      refreshContext(context);\r\n      afterRefresh(context, applicationArguments);\r\n      listeners.finished(context, null);\r\n      stopWatch.stop();\r\n      if (this.logStartupInfo) {\r\n         new StartupInfoLogger(this.mainApplicationClass)\r\n               .logStarted(getApplicationLog(), stopWatch);\r\n      }\r\n      return context;\r\n   }\r\n   catch (Throwable ex) {\r\n      handleRunFailure(context, listeners, analyzers, ex);\r\n      throw new IllegalStateException(ex);\r\n   }\r\n}\r\n```\r\n\r\n**==启动Servlet容器，再启动SpringBoot应用==**\r\n\r\n\r\n\r\n# 五、Docker\r\n\r\n## 1、简介\r\n\r\n**Docker**是一个开源的应用容器引擎；是一个轻量级容器技术；\r\n\r\nDocker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像；\r\n\r\n运行中的这个镜像称为容器，容器启动是非常快速的。\r\n\r\n![](images/搜狗截图20180303145450.png)\r\n\r\n\r\n\r\n![](images/搜狗截图20180303145531.png)\r\n\r\n## 2、核心概念\r\n\r\ndocker主机(Host)：安装了Docker程序的机器（Docker直接安装在操作系统之上）；\r\n\r\ndocker客户端(Client)：连接docker主机进行操作；\r\n\r\ndocker仓库(Registry)：用来保存各种打包好的软件镜像；\r\n\r\ndocker镜像(Images)：软件打包好的镜像；放在docker仓库中；\r\n\r\ndocker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用\r\n\r\n![](images/搜狗截图20180303165113.png)\r\n\r\n使用Docker的步骤：\r\n\r\n1）、安装Docker\r\n\r\n2）、去Docker仓库找到这个软件对应的镜像；\r\n\r\n3）、使用Docker运行这个镜像，这个镜像就会生成一个Docker容器；\r\n\r\n4）、对容器的启动停止就是对软件的启动停止；\r\n\r\n## 3、安装Docker\r\n\r\n#### 1）、安装linux虚拟机\r\n\r\n​	1）、VMWare、VirtualBox（安装）；\r\n\r\n​	2）、导入虚拟机文件centos7-atguigu.ova；\r\n\r\n​	3）、双击启动linux虚拟机;使用  root/ 123456登陆\r\n\r\n​	4）、使用客户端连接linux服务器进行命令操作；\r\n\r\n​	5）、设置虚拟机网络；\r\n\r\n​		桥接网络===选好网卡====接入网线；\r\n\r\n​	6）、设置好网络以后使用命令重启虚拟机的网络\r\n\r\n```shell\r\nservice network restart\r\n```\r\n\r\n​	7）、查看linux的ip地址\r\n\r\n```shell\r\nip addr\r\n```\r\n\r\n​	8）、使用客户端连接linux；\r\n\r\n#### 2）、在linux虚拟机上安装docker\r\n\r\n步骤：\r\n\r\n```shell\r\n1、检查内核版本，必须是3.10及以上\r\nuname -r\r\n2、安装docker\r\nyum install docker\r\n3、输入y确认安装\r\n4、启动docker\r\n[root@localhost ~]# systemctl start docker\r\n[root@localhost ~]# docker -v\r\nDocker version 1.12.6, build 3e8e77d/1.12.6\r\n5、开机启动docker\r\n[root@localhost ~]# systemctl enable docker\r\nCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.\r\n6、停止docker\r\nsystemctl stop docker\r\n```\r\n\r\n## 4、Docker常用命令&操作\r\n\r\n### 1）、镜像操作\r\n\r\n| 操作 | 命令                                            | 说明                                                     |\r\n| ---- | ----------------------------------------------- | -------------------------------------------------------- |\r\n| 检索 | docker  search 关键字  eg：docker  search redis | 我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。 |\r\n| 拉取 | docker pull 镜像名:tag                          | :tag是可选的，tag表示标签，多为软件的版本，默认是latest  |\r\n| 列表 | docker images                                   | 查看所有本地镜像                                         |\r\n| 删除 | rdocker rmi image-id                            | 删除指定的本地镜像                                       |\r\n\r\nhttps://hub.docker.com/\r\n\r\n### 2）、容器操作\r\n\r\n软件镜像（QQ安装程序）----运行镜像----产生一个容器（正在运行的软件，运行的QQ）；\r\n\r\n步骤：\r\n\r\n````shell\r\n1、搜索镜像\r\n[root@localhost ~]# docker search tomcat\r\n2、拉取镜像\r\n[root@localhost ~]# docker pull tomcat\r\n3、根据镜像启动容器\r\ndocker run --name mytomcat -d tomcat:latest\r\n4、docker ps  \r\n查看运行中的容器\r\n5、 停止运行中的容器\r\ndocker stop  容器的id\r\n6、查看所有的容器\r\ndocker ps -a\r\n7、启动容器\r\ndocker start 容器id\r\n8、删除一个容器\r\n docker rm 容器id\r\n9、启动一个做了端口映射的tomcat\r\n[root@localhost ~]# docker run -d -p 8888:8080 tomcat\r\n-d：后台运行\r\n-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口\r\n\r\n10、为了演示简单关闭了linux的防火墙\r\nservice firewalld status ；查看防火墙状态\r\nservice firewalld stop：关闭防火墙\r\n11、查看容器的日志\r\ndocker logs container-name/container-id\r\n\r\n更多命令参看\r\nhttps://docs.docker.com/engine/reference/commandline/docker/\r\n可以参考每一个镜像的文档\r\n\r\n````\r\n\r\n\r\n\r\n### 3）、安装MySQL示例\r\n\r\n```shell\r\ndocker pull mysql\r\n```\r\n\r\n\r\n\r\n错误的启动\r\n\r\n```shell\r\n[root@localhost ~]# docker run --name mysql01 -d mysql\r\n42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846\r\n\r\nmysql退出了\r\n[root@localhost ~]# docker ps -a\r\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES\r\n42f09819908b        mysql               \"docker-entrypoint.sh\"   34 seconds ago      Exited (1) 33 seconds ago                            mysql01\r\n538bde63e500        tomcat              \"catalina.sh run\"        About an hour ago   Exited (143) About an hour ago                       compassionate_\r\ngoldstine\r\nc4f1ac60b3fc        tomcat              \"catalina.sh run\"        About an hour ago   Exited (143) About an hour ago                       lonely_fermi\r\n81ec743a5271        tomcat              \"catalina.sh run\"        About an hour ago   Exited (143) About an hour ago                       sick_ramanujan\r\n\r\n\r\n//错误日志\r\n[root@localhost ~]# docker logs 42f09819908b\r\nerror: database is uninitialized and password option is not specified \r\n  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个\r\n```\r\n\r\n正确的启动\r\n\r\n```shell\r\n[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysql\r\nb874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f\r\n[root@localhost ~]# docker ps\r\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\r\nb874c56bec49        mysql               \"docker-entrypoint.sh\"   4 seconds ago       Up 3 seconds        3306/tcp            mysql01\r\n```\r\n\r\n做了端口映射\r\n\r\n```shell\r\n[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysql\r\nad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434\r\n[root@localhost ~]# docker ps\r\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\r\nad10e4bc5c6a        mysql               \"docker-entrypoint.sh\"   4 seconds ago       Up 2 seconds        0.0.0.0:3306->3306/tcp   mysql02\r\n```\r\n\r\n\r\n\r\n几个其他的高级操作\r\n\r\n```\r\ndocker run --name mysql03 -v /conf/mysql:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag\r\n把主机的/conf/mysql文件夹挂载到 mysqldocker容器的/etc/mysql/conf.d文件夹里面\r\n改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（/conf/mysql）\r\n\r\ndocker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\r\n指定mysql的一些配置参数\r\n```\r\n\r\n\r\n\r\n# 六、SpringBoot与数据访问\r\n\r\n## 1、JDBC\r\n\r\n```xml\r\n<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-jdbc</artifactId>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>mysql</groupId>\r\n			<artifactId>mysql-connector-java</artifactId>\r\n			<scope>runtime</scope>\r\n		</dependency>\r\n```\r\n\r\n\r\n\r\n```yaml\r\nspring:\r\n  datasource:\r\n    username: root\r\n    password: 123456\r\n    url: jdbc:mysql://192.168.15.22:3306/jdbc\r\n    driver-class-name: com.mysql.jdbc.Driver\r\n```\r\n\r\n效果：\r\n\r\n​	默认是用org.apache.tomcat.jdbc.pool.DataSource作为数据源；\r\n\r\n​	数据源的相关配置都在DataSourceProperties里面；\r\n\r\n自动配置原理：\r\n\r\norg.springframework.boot.autoconfigure.jdbc：\r\n\r\n1、参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat连接池；可以使用spring.datasource.type指定自定义的数据源类型；\r\n\r\n2、SpringBoot默认可以支持；\r\n\r\n```\r\norg.apache.tomcat.jdbc.pool.DataSource、HikariDataSource、BasicDataSource、\r\n```\r\n\r\n3、自定义数据源类型\r\n\r\n```java\r\n/**\r\n * Generic DataSource configuration.\r\n */\r\n@ConditionalOnMissingBean(DataSource.class)\r\n@ConditionalOnProperty(name = \"spring.datasource.type\")\r\nstatic class Generic {\r\n\r\n   @Bean\r\n   public DataSource dataSource(DataSourceProperties properties) {\r\n       //使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性\r\n      return properties.initializeDataSourceBuilder().build();\r\n   }\r\n\r\n}\r\n```\r\n\r\n4、**DataSourceInitializer：ApplicationListener**；\r\n\r\n​	作用：\r\n\r\n​		1）、runSchemaScripts();运行建表语句；\r\n\r\n​		2）、runDataScripts();运行插入数据的sql语句；\r\n\r\n默认只需要将文件命名为：\r\n\r\n```properties\r\nschema-*.sql、data-*.sql\r\n默认规则：schema.sql，schema-all.sql；\r\n可以使用   \r\n	schema:\r\n      - classpath:department.sql\r\n      指定位置\r\n```\r\n\r\n5、操作数据库：自动配置了JdbcTemplate操作数据库\r\n\r\n## 2、整合Druid数据源\r\n\r\n```java\r\n导入druid数据源\r\n@Configuration\r\npublic class DruidConfig {\r\n\r\n    @ConfigurationProperties(prefix = \"spring.datasource\")\r\n    @Bean\r\n    public DataSource druid(){\r\n       return  new DruidDataSource();\r\n    }\r\n\r\n    //配置Druid的监控\r\n    //1、配置一个管理后台的Servlet\r\n    @Bean\r\n    public ServletRegistrationBean statViewServlet(){\r\n        ServletRegistrationBean bean = new ServletRegistrationBean(new StatViewServlet(), \"/druid/*\");\r\n        Map<String,String> initParams = new HashMap<>();\r\n\r\n        initParams.put(\"loginUsername\",\"admin\");\r\n        initParams.put(\"loginPassword\",\"123456\");\r\n        initParams.put(\"allow\",\"\");//默认就是允许所有访问\r\n        initParams.put(\"deny\",\"192.168.15.21\");\r\n\r\n        bean.setInitParameters(initParams);\r\n        return bean;\r\n    }\r\n\r\n\r\n    //2、配置一个web监控的filter\r\n    @Bean\r\n    public FilterRegistrationBean webStatFilter(){\r\n        FilterRegistrationBean bean = new FilterRegistrationBean();\r\n        bean.setFilter(new WebStatFilter());\r\n\r\n        Map<String,String> initParams = new HashMap<>();\r\n        initParams.put(\"exclusions\",\"*.js,*.css,/druid/*\");\r\n\r\n        bean.setInitParameters(initParams);\r\n\r\n        bean.setUrlPatterns(Arrays.asList(\"/*\"));\r\n\r\n        return  bean;\r\n    }\r\n}\r\n\r\n```\r\n\r\n## 3、整合MyBatis\r\n\r\n```xml\r\n		<dependency>\r\n			<groupId>org.mybatis.spring.boot</groupId>\r\n			<artifactId>mybatis-spring-boot-starter</artifactId>\r\n			<version>1.3.1</version>\r\n		</dependency>\r\n```\r\n\r\n![](images/搜狗截图20180305194443.png)\r\n\r\n步骤：\r\n\r\n​	1）、配置数据源相关属性（见上一节Druid）\r\n\r\n​	2）、给数据库建表\r\n\r\n​	3）、创建JavaBean\r\n\r\n### 	4）、注解版\r\n\r\n```java\r\n//指定这是一个操作数据库的mapper\r\n@Mapper\r\npublic interface DepartmentMapper {\r\n\r\n    @Select(\"select * from department where id=#{id}\")\r\n    public Department getDeptById(Integer id);\r\n\r\n    @Delete(\"delete from department where id=#{id}\")\r\n    public int deleteDeptById(Integer id);\r\n\r\n    @Options(useGeneratedKeys = true,keyProperty = \"id\")\r\n    @Insert(\"insert into department(departmentName) values(#{departmentName})\")\r\n    public int insertDept(Department department);\r\n\r\n    @Update(\"update department set departmentName=#{departmentName} where id=#{id}\")\r\n    public int updateDept(Department department);\r\n}\r\n```\r\n\r\n问题：\r\n\r\n自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer；\r\n\r\n```java\r\n@org.springframework.context.annotation.Configuration\r\npublic class MyBatisConfig {\r\n\r\n    @Bean\r\n    public ConfigurationCustomizer configurationCustomizer(){\r\n        return new ConfigurationCustomizer(){\r\n\r\n            @Override\r\n            public void customize(Configuration configuration) {\r\n                configuration.setMapUnderscoreToCamelCase(true);\r\n            }\r\n        };\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n```java\r\n使用MapperScan批量扫描所有的Mapper接口；\r\n@MapperScan(value = \"com.atguigu.springboot.mapper\")\r\n@SpringBootApplication\r\npublic class SpringBoot06DataMybatisApplication {\r\n\r\n	public static void main(String[] args) {\r\n		SpringApplication.run(SpringBoot06DataMybatisApplication.class, args);\r\n	}\r\n}\r\n```\r\n\r\n### 5）、配置文件版\r\n\r\n```yaml\r\nmybatis:\r\n  config-location: classpath:mybatis/mybatis-config.xml 指定全局配置文件的位置\r\n  mapper-locations: classpath:mybatis/mapper/*.xml  指定sql映射文件的位置\r\n```\r\n\r\n更多使用参照\r\n\r\nhttp://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/\r\n\r\n\r\n\r\n## 4、整合SpringData JPA\r\n\r\n### 1）、SpringData简介\r\n\r\n![](images/搜狗截图20180306105412.png)\r\n\r\n### 2）、整合SpringData JPA\r\n\r\nJPA:ORM（Object Relational Mapping）；\r\n\r\n1）、编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；\r\n\r\n```java\r\n//使用JPA注解配置映射关系\r\n@Entity //告诉JPA这是一个实体类（和数据表映射的类）\r\n@Table(name = \"tbl_user\") //@Table来指定和哪个数据表对应;如果省略默认表名就是user；\r\npublic class User {\r\n\r\n    @Id //这是一个主键\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)//自增主键\r\n    private Integer id;\r\n\r\n    @Column(name = \"last_name\",length = 50) //这是和数据表对应的一个列\r\n    private String lastName;\r\n    @Column //省略默认列名就是属性名\r\n    private String email;\r\n```\r\n\r\n2）、编写一个Dao接口来操作实体类对应的数据表（Repository）\r\n\r\n```java\r\n//继承JpaRepository来完成对数据库的操作\r\npublic interface UserRepository extends JpaRepository<User,Integer> {\r\n}\r\n\r\n```\r\n\r\n3）、基本的配置JpaProperties\r\n\r\n```yaml\r\nspring:  \r\n jpa:\r\n    hibernate:\r\n#     更新或者创建数据表结构\r\n      ddl-auto: update\r\n#    控制台显示SQL\r\n    show-sql: true\r\n```\r\n\r\n\r\n\r\n# 七、启动配置原理\r\n\r\n几个重要的事件回调机制\r\n\r\n配置在META-INF/spring.factories\r\n\r\n**ApplicationContextInitializer**\r\n\r\n**SpringApplicationRunListener**\r\n\r\n\r\n\r\n只需要放在ioc容器中\r\n\r\n**ApplicationRunner**\r\n\r\n**CommandLineRunner**\r\n\r\n\r\n\r\n启动流程：\r\n\r\n## **1、创建SpringApplication对象**\r\n\r\n```java\r\ninitialize(sources);\r\nprivate void initialize(Object[] sources) {\r\n    //保存主配置类\r\n    if (sources != null && sources.length > 0) {\r\n        this.sources.addAll(Arrays.asList(sources));\r\n    }\r\n    //判断当前是否一个web应用\r\n    this.webEnvironment = deduceWebEnvironment();\r\n    //从类路径下找到META-INF/spring.factories配置的所有ApplicationContextInitializer；然后保存起来\r\n    setInitializers((Collection) getSpringFactoriesInstances(\r\n        ApplicationContextInitializer.class));\r\n    //从类路径下找到ETA-INF/spring.factories配置的所有ApplicationListener\r\n    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));\r\n    //从多个配置类中找到有main方法的主配置类\r\n    this.mainApplicationClass = deduceMainApplicationClass();\r\n}\r\n```\r\n\r\n![](images/搜狗截图20180306145727.png)\r\n\r\n![](images/搜狗截图20180306145855.png)\r\n\r\n## 2、运行run方法\r\n\r\n```java\r\npublic ConfigurableApplicationContext run(String... args) {\r\n   StopWatch stopWatch = new StopWatch();\r\n   stopWatch.start();\r\n   ConfigurableApplicationContext context = null;\r\n   FailureAnalyzers analyzers = null;\r\n   configureHeadlessProperty();\r\n    \r\n   //获取SpringApplicationRunListeners；从类路径下META-INF/spring.factories\r\n   SpringApplicationRunListeners listeners = getRunListeners(args);\r\n    //回调所有的获取SpringApplicationRunListener.starting()方法\r\n   listeners.starting();\r\n   try {\r\n       //封装命令行参数\r\n      ApplicationArguments applicationArguments = new DefaultApplicationArguments(\r\n            args);\r\n      //准备环境\r\n      ConfigurableEnvironment environment = prepareEnvironment(listeners,\r\n            applicationArguments);\r\n       		//创建环境完成后回调SpringApplicationRunListener.environmentPrepared()；表示环境准备完成\r\n       \r\n      Banner printedBanner = printBanner(environment);\r\n       \r\n       //创建ApplicationContext；决定创建web的ioc还是普通的ioc\r\n      context = createApplicationContext();\r\n       \r\n      analyzers = new FailureAnalyzers(context);\r\n       //准备上下文环境;将environment保存到ioc中；而且applyInitializers()；\r\n       //applyInitializers()：回调之前保存的所有的ApplicationContextInitializer的initialize方法\r\n       //回调所有的SpringApplicationRunListener的contextPrepared()；\r\n       //\r\n      prepareContext(context, environment, listeners, applicationArguments,\r\n            printedBanner);\r\n       //prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded（）；\r\n       \r\n       //s刷新容器；ioc容器初始化（如果是web应用还会创建嵌入式的Tomcat）；Spring注解版\r\n       //扫描，创建，加载所有组件的地方；（配置类，组件，自动配置）\r\n      refreshContext(context);\r\n       //从ioc容器中获取所有的ApplicationRunner和CommandLineRunner进行回调\r\n       //ApplicationRunner先回调，CommandLineRunner再回调\r\n      afterRefresh(context, applicationArguments);\r\n       //所有的SpringApplicationRunListener回调finished方法\r\n      listeners.finished(context, null);\r\n      stopWatch.stop();\r\n      if (this.logStartupInfo) {\r\n         new StartupInfoLogger(this.mainApplicationClass)\r\n               .logStarted(getApplicationLog(), stopWatch);\r\n      }\r\n       //整个SpringBoot应用启动完成以后返回启动的ioc容器；\r\n      return context;\r\n   }\r\n   catch (Throwable ex) {\r\n      handleRunFailure(context, listeners, analyzers, ex);\r\n      throw new IllegalStateException(ex);\r\n   }\r\n}\r\n```\r\n\r\n## 3、事件监听机制\r\n\r\n配置在META-INF/spring.factories\r\n\r\n**ApplicationContextInitializer**\r\n\r\n```java\r\npublic class HelloApplicationContextInitializer implements ApplicationContextInitializer<ConfigurableApplicationContext> {\r\n    @Override\r\n    public void initialize(ConfigurableApplicationContext applicationContext) {\r\n        System.out.println(\"ApplicationContextInitializer...initialize...\"+applicationContext);\r\n    }\r\n}\r\n\r\n```\r\n\r\n**SpringApplicationRunListener**\r\n\r\n```java\r\npublic class HelloSpringApplicationRunListener implements SpringApplicationRunListener {\r\n\r\n    //必须有的构造器\r\n    public HelloSpringApplicationRunListener(SpringApplication application, String[] args){\r\n\r\n    }\r\n\r\n    @Override\r\n    public void starting() {\r\n        System.out.println(\"SpringApplicationRunListener...starting...\");\r\n    }\r\n\r\n    @Override\r\n    public void environmentPrepared(ConfigurableEnvironment environment) {\r\n        Object o = environment.getSystemProperties().get(\"os.name\");\r\n        System.out.println(\"SpringApplicationRunListener...environmentPrepared..\"+o);\r\n    }\r\n\r\n    @Override\r\n    public void contextPrepared(ConfigurableApplicationContext context) {\r\n        System.out.println(\"SpringApplicationRunListener...contextPrepared...\");\r\n    }\r\n\r\n    @Override\r\n    public void contextLoaded(ConfigurableApplicationContext context) {\r\n        System.out.println(\"SpringApplicationRunListener...contextLoaded...\");\r\n    }\r\n\r\n    @Override\r\n    public void finished(ConfigurableApplicationContext context, Throwable exception) {\r\n        System.out.println(\"SpringApplicationRunListener...finished...\");\r\n    }\r\n}\r\n\r\n```\r\n\r\n配置（META-INF/spring.factories）\r\n\r\n```properties\r\norg.springframework.context.ApplicationContextInitializer=\\\r\ncom.atguigu.springboot.listener.HelloApplicationContextInitializer\r\n\r\norg.springframework.boot.SpringApplicationRunListener=\\\r\ncom.atguigu.springboot.listener.HelloSpringApplicationRunListener\r\n```\r\n\r\n\r\n\r\n\r\n\r\n只需要放在ioc容器中\r\n\r\n**ApplicationRunner**\r\n\r\n```java\r\n@Component\r\npublic class HelloApplicationRunner implements ApplicationRunner {\r\n    @Override\r\n    public void run(ApplicationArguments args) throws Exception {\r\n        System.out.println(\"ApplicationRunner...run....\");\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n**CommandLineRunner**\r\n\r\n```java\r\n@Component\r\npublic class HelloCommandLineRunner implements CommandLineRunner {\r\n    @Override\r\n    public void run(String... args) throws Exception {\r\n        System.out.println(\"CommandLineRunner...run...\"+ Arrays.asList(args));\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n# 八、自定义starter\r\n\r\nstarter：\r\n\r\n​	1、这个场景需要使用到的依赖是什么？\r\n\r\n​	2、如何编写自动配置\r\n\r\n```java\r\n@Configuration  //指定这个类是一个配置类\r\n@ConditionalOnXXX  //在指定条件成立的情况下自动配置类生效\r\n@AutoConfigureAfter  //指定自动配置类的顺序\r\n@Bean  //给容器中添加组件\r\n\r\n@ConfigurationPropertie结合相关xxxProperties类来绑定相关的配置\r\n@EnableConfigurationProperties //让xxxProperties生效加入到容器中\r\n\r\n自动配置类要能加载\r\n将需要启动就加载的自动配置类，配置在META-INF/spring.factories\r\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\r\norg.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\\r\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\\r\n```\r\n\r\n​	3、模式：\r\n\r\n启动器只用来做依赖导入；\r\n\r\n专门来写一个自动配置模块；\r\n\r\n启动器依赖自动配置；别人只需要引入启动器（starter）\r\n\r\nmybatis-spring-boot-starter；自定义启动器名-spring-boot-starter\r\n\r\n\r\n\r\n步骤：\r\n\r\n1）、启动器模块\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.atguigu.starter</groupId>\r\n    <artifactId>atguigu-spring-boot-starter</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n\r\n    <!--启动器-->\r\n    <dependencies>\r\n\r\n        <!--引入自动配置模块-->\r\n        <dependency>\r\n            <groupId>com.atguigu.starter</groupId>\r\n            <artifactId>atguigu-spring-boot-starter-autoconfigurer</artifactId>\r\n            <version>0.0.1-SNAPSHOT</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n</project>\r\n```\r\n\r\n2）、自动配置模块\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n   <modelVersion>4.0.0</modelVersion>\r\n\r\n   <groupId>com.atguigu.starter</groupId>\r\n   <artifactId>atguigu-spring-boot-starter-autoconfigurer</artifactId>\r\n   <version>0.0.1-SNAPSHOT</version>\r\n   <packaging>jar</packaging>\r\n\r\n   <name>atguigu-spring-boot-starter-autoconfigurer</name>\r\n   <description>Demo project for Spring Boot</description>\r\n\r\n   <parent>\r\n      <groupId>org.springframework.boot</groupId>\r\n      <artifactId>spring-boot-starter-parent</artifactId>\r\n      <version>1.5.10.RELEASE</version>\r\n      <relativePath/> <!-- lookup parent from repository -->\r\n   </parent>\r\n\r\n   <properties>\r\n      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n      <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n      <java.version>1.8</java.version>\r\n   </properties>\r\n\r\n   <dependencies>\r\n\r\n      <!--引入spring-boot-starter；所有starter的基本配置-->\r\n      <dependency>\r\n         <groupId>org.springframework.boot</groupId>\r\n         <artifactId>spring-boot-starter</artifactId>\r\n      </dependency>\r\n\r\n   </dependencies>\r\n\r\n\r\n\r\n</project>\r\n\r\n```\r\n\r\n\r\n\r\n```java\r\npackage com.atguigu.starter;\r\n\r\nimport org.springframework.boot.context.properties.ConfigurationProperties;\r\n\r\n@ConfigurationProperties(prefix = \"atguigu.hello\")\r\npublic class HelloProperties {\r\n\r\n    private String prefix;\r\n    private String suffix;\r\n\r\n    public String getPrefix() {\r\n        return prefix;\r\n    }\r\n\r\n    public void setPrefix(String prefix) {\r\n        this.prefix = prefix;\r\n    }\r\n\r\n    public String getSuffix() {\r\n        return suffix;\r\n    }\r\n\r\n    public void setSuffix(String suffix) {\r\n        this.suffix = suffix;\r\n    }\r\n}\r\n\r\n```\r\n\r\n```java\r\npackage com.atguigu.starter;\r\n\r\npublic class HelloService {\r\n\r\n    HelloProperties helloProperties;\r\n\r\n    public HelloProperties getHelloProperties() {\r\n        return helloProperties;\r\n    }\r\n\r\n    public void setHelloProperties(HelloProperties helloProperties) {\r\n        this.helloProperties = helloProperties;\r\n    }\r\n\r\n    public String sayHellAtguigu(String name){\r\n        return helloProperties.getPrefix()+\"-\" +name + helloProperties.getSuffix();\r\n    }\r\n}\r\n\r\n```\r\n\r\n```java\r\npackage com.atguigu.starter;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\r\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\n\r\n@Configuration\r\n@ConditionalOnWebApplication //web应用才生效\r\n@EnableConfigurationProperties(HelloProperties.class)\r\npublic class HelloServiceAutoConfiguration {\r\n\r\n    @Autowired\r\n    HelloProperties helloProperties;\r\n    @Bean\r\n    public HelloService helloService(){\r\n        HelloService service = new HelloService();\r\n        service.setHelloProperties(helloProperties);\r\n        return service;\r\n    }\r\n}\r\n\r\n```\r\n\r\n# 更多SpringBoot整合示例\r\n\r\nhttps://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples', 'https://i.picsum.photos/id/119/3264/2176.jpg?hmac=PYRYBOGQhlUm6wS94EkpN8dTIC7-2GniC3pqOt6CpNU', '原创', 0, 1, 1, 1, 1, 1, '2020-02-10 09:59:08', '2020-08-11 09:59:08', 1, 1, '尚硅谷雷神springboot笔记');
INSERT INTO `t_blog` VALUES (36, 'Linux命令', '# Linux笔记\r\n\r\n\r\n\r\n## **========Vim编辑==**======\r\n\r\n创建一个文件：vim 文件名\r\n进入编辑模式：i或a\r\n退出编辑模式：esc\r\n退出这个文件并保存:wq\r\n直接退出：q\r\n退出不保存：q！\r\n\r\n复制当前行：yy\r\n复制n行: nyy\r\n粘贴：p\r\n删除当前行：dd\r\n删除n行：ndd\r\n在文件中查找某个单词：/关键字 回车查找 n是查找下一个 N是查找上一个\r\n显示行号 ：set nu\r\n不显示行号：set nonu\r\n使用快捷键直接到第一行：gg\r\n使用快捷键直接到最后一行：G\r\n撤销动作：u\r\n使光标移动到第n行: n shift+g\r\n\r\n## \r\n\r\n------\r\n\r\n## ========开关机=========\r\n\r\n\r\n\r\n立即关机：shutdown -h now   / halt\r\n1分钟后后关机：shutdown -h 1\r\n立即重启：shutdown -r now/reboot\r\n把数据同步到磁盘：sync(每次关机都要输一遍，防止数据丢失)\r\n\r\n注销用户：logout\r\n添加用户：useradd 用户名\r\n添加用户指定家目录：useradd -d 指定目录 用户名\r\n给用户指定或修改密码：passwd 用户名\r\n删除用户：userdel 用户名\r\n删除用户及删除它的家目录：userdel -r 用户名\r\n查看当前用户：id 用户名\r\n切换用户：su - 用户名\r\n返回原来的用户：exit\r\n创建组 ： groupadd  组名  groupadd first\r\n删除组：  groupdel   组名  groupdel first\r\n增加用户时直接指定在哪个组： useradd -g 组名 用户名  useradd -g ydw first\r\n给用户改组：usermod -g  组名 用户名\r\n\r\n------\r\n\r\n## ========配置文件========\r\n\r\n用户的配置文件(/etc/passwd) ：\r\n每行的含义：存放用户id 组id 家目录 shell\r\n\r\n口令的二配置文件(/etc/shatdow) ：\r\n每行的含义登录名：加密口令：最后一次修改时间：最小间隔时间：最大间隔时间：警告时间：不活动时间：失效时间 标志\r\n\r\n组的配置文件（etc/group）：记录Linux各个组的信息  \r\n每行的含义：组名：口令：组标识号：组内用户列表\r\n\r\n------\r\n\r\n## ========实用指令========\r\n\r\n\r\n\r\n### 1 运行级别：共7个\r\n\r\n要修改默认级别  在配置文件中修改 /etc/inittab\r\n\r\n0：关机\r\n\r\n1：单用户【找回丢失密码】\r\n\r\n2：多用户状态，没有网络服务\r\n\r\n**3**：多用户状态，有网络服务\r\n\r\n4：系统未使用保留给用户\r\n\r\n**5**：图形界面\r\n\r\n6：系统重启（无限重启）\r\n\r\n\r\n\r\n### 2 切换到指定运行级别指令\r\n\r\n基本语法：init[012356]\r\n\r\ninit 3\r\n\r\n### 3 忘记密码\r\n\r\n\r\n\r\n前提：不能远程登陆，必须在linux所在的电脑操作\r\n\r\n\r\n\r\n开机在引导时输入ENTER\r\n\r\n看到一个界面按e\r\n\r\n然后选第二行(编辑内核)按e进去\r\n\r\n然后在新的界面输入空格1按回车 在按b 就进入到单用户模式了\r\n\r\n然后修改密码：passwd root\r\n\r\n重启reboot \r\n\r\n\r\n\r\n### 4 各种指令\r\n\r\n#### pwd：显示当前目录的绝对路径\r\n\r\n\r\n\r\n#### ls：显示 \r\n\r\n​	  -a : 显示隐藏的文件(.开头的就是隐藏的文件)\r\n\r\n​      -l : 以列表的方式显示\r\n\r\n​	  -la\r\n\r\n\r\n\r\n#### cd：切换到指定路径\r\n\r\n目前在 /home/yanglaoban 下\r\n\r\n到home下面的zhaoying文件夹\r\n\r\n​	绝对路径  ：  cd /home/zhaoying\r\n\r\n   相对路径   ：  ../zhaoying      \r\n\r\n   回到上一级 : ..\r\n\r\n 回到家目录 :cd~\r\n\r\n\r\n\r\n\r\n\r\n#### mkdir:创建目录\r\n\r\n在home目录下创建newFile目录\r\n\r\nmkdir  /home/newFile\r\n\r\n#### rmdir：删除目录\r\n\r\n  删除一个目录 rmdir /home/newFile（只能删除空的）\r\n\r\n  删除非空的  rm -rf /home/newFile\r\n\r\n不要用 rm -rf/*\r\n\r\n#### touch：创建空文件\r\n\r\ntouch 文件名称 文件名称\r\n\r\n#### cp：拷贝文件\r\n\r\ncp  source dest\r\n\r\n​	source的含义：要拷贝的文件\r\n\r\n​	dest的含义：要拷贝到哪\r\n\r\n-r  拷贝整个文件夹\r\n\r\n\r\n\r\ncp newFile1 file/\r\n\r\n将newFile 拷贝到当前目录下的file下\r\n\r\n\\cp newFile1 file/\r\n\r\n强制覆盖\r\n\r\n\r\n\r\n\r\n\r\n#### rm:移除 删除指令\r\n\r\nrm 文件名 直接删除 （提示是否删除 输入y才删除）\r\n\r\nrm -rf 文件\r\n\r\n-r 递归删除整个文件夹\r\n\r\n-f  强制删除不提示\r\n\r\n\r\n\r\n#### mv：移动文件与目录或重命名\r\n\r\nmv   Dog/file zhaoying   (将DOG下面的file文件夹移动到zhaoying)\r\n\r\nmv zhaoying/file zhaoying/file2 （将zhaoying文件夹下的file文件夹 重命名为 file2）\r\n\r\n#### cat/more/less：浏览文件\r\n\r\ncat -n  /etc/profile | more （一页一页显示 带行号 不带-n不显示）\r\n\r\n\r\n\r\n\r\n\r\n#### /   >指令和>>指令\r\n\r\n /   >是清空之后添加指令   >>追加\r\n\r\n\r\n\r\n#### echo:输出\r\n\r\n输出内容到控制台\r\n\r\neach hello world\r\n\r\n\r\n\r\n#### head:显示\r\n\r\n查看文本的几行\r\n\r\nhead -n 5 /etc/profile\r\n\r\n\r\n\r\n#### tail：输出(用的最多)\r\n\r\n用户输出文件中尾部的内容，默认情况下显示文件的后10行\r\n\r\ntail 文件（供能描述，查看文件后10行内容）\r\n\r\ntail -n 5 文件（查看文件后5行内容，5可以是任意行数）\r\n\r\ntail -f  文件    实时查看这个文件有没有变化。有变化会看到\r\n\r\n\r\n\r\n\r\n\r\n#### ln 创建快捷方式\r\n\r\nln -s  /root linkroot \r\n\r\n#### history：查看历史指令\r\n\r\nhistory 查看用过的所有指令\r\n\r\nhistory 10 查看用过的10个指令\r\n\r\n！5 查看并执行第五次用的指令\r\n\r\n\r\n\r\n\r\n\r\n###   =======时间日期指令=====\r\n\r\n#### date：显示当前日期\r\n\r\n(可直接使用)\r\n\r\ndate \"+%Y+%m+%d\"\r\n\r\ndate \"+%Y %m %d\"\r\n\r\ndate \"+%Y年 %M月 +%d日\"\r\n\r\n\r\n\r\ndate -s \"2020-1-1 20:30:59\"  （将系统时间设置为指定时间）\r\n\r\n注意：加号不可以省略\r\n\r\n\r\n\r\n#### cal：查看日历\r\n\r\ncal 2020 查看2020年的日历\r\n\r\n\r\n\r\n#### ======搜索查找指令======\r\n\r\n#### find:递归查找\r\n\r\nfind [搜索位置] [搜索条件]\r\n\r\nfind  /home  -name fil*   查找home文件夹下的 fil开头的文件或目录\r\n\r\nfind /home -user zhaoying  查找home文件夹下 用户zhaoying的文件或目录\r\n\r\nfind /   -size +20M         查找linux系统下大于20m（小于：-。等于： 直接写20M）的文件（G.M,K,...,必须大写，如果太多卡住了按ctrl +c）\r\n\r\n#### locate:快速查找\r\n\r\n（速度快需要先 updatedb 指令创建数据库）\r\n\r\nupdatedb\r\n\r\nlocate [文件名]\r\n\r\n#### grep指令和管道符 |\r\n\r\n先查找文件\r\n\r\n常用选项 ：-n 显示 行号\r\n\r\n​                      -i  或略大小写\r\n\r\ncat  /hello/newFile.txt | grep  [选项] [查找条件]\r\n\r\n\r\n\r\n### =======压缩/解压缩指令===\r\n\r\ngzip/gunzip:压缩文件\r\n\r\n只能压缩成.gz\r\n\r\n\r\n\r\n#### zip/unzip：可解压文件夹下的所有文件\r\n\r\nzip -r  mypackage.zip /home/file \r\n\r\nunzip -d /home/Dog \r\n\r\n\r\n\r\n#### tar：打包指令\r\n\r\ntar -zcvf  a.tar.gz  /home/Dog/file/newFile5.txt /home/Dog/file/newFilet5.txt\r\n\r\n\r\n\r\ntar -zxvf [文件的路径]\r\n\r\ntar -zxvf a.tar.gz\r\n\r\n\r\n\r\n### =======组管理 权限管理======\r\n\r\n#### ls -ahl ：查看文件的所有者\r\n\r\n#### chown ： 修改文件所有者\r\n\r\nchown [用户名] [文件名]\r\n\r\n#### chgrp 修改文件所在的组\r\n\r\nchgrp  【组名][文件名]\r\n\r\n#### usermod：改变用户所在的组\r\n\r\nusermod  -g 组名 用户名 \r\n\r\nusermod    -d 目录名 用户名 改变该用户登陆的初始目录\r\n\r\n\r\n\r\n#### chmod：修改文件或目录的权限\r\n\r\n将abc.txt 添加 所有者rwx权限  同组rw权限 其余rx\r\n\r\nchmod  u=rwx,g=rw,o=rx abc.txt\r\n\r\n给abc.txt 的所有者去除执行权限，同组增加执行权限\r\n\r\nchmod u-x,g+x abc.txt\r\n\r\n给abc文件的所有用户添加读的权限\r\n\r\nchmod a+w abc.txt\r\n\r\n第二种方式\r\n\r\n规则：r=4 w=2 x=1 \r\n\r\n\r\n\r\n例：将/home/fox 文件和文件下的所有文件的所有者改为zhaoying\r\n\r\nchown -R zhaoying fox\r\n\r\n例：将/home/fox 文件和文件下的所有文件的所有组改为zhaoying\r\n\r\nchgrp -R zhaoying fox\r\n\r\n\r\n\r\n### =====权限综合案例====\r\n\r\n#### 案例一\r\n\r\npolice bandit\r\n\r\njack jerry： 警察\r\n\r\nxh xq：土匪\r\n\r\n（1）创建组\r\n\r\ngroupadd police\r\n\r\ngroupadd bandit\r\n\r\n（2）创建用户\r\n\r\nuseradd -g police jack\r\n\r\nuseradd -g police jerry\r\n\r\nuseradd -g bandit  xh\r\n\r\nuseradd -g bandit xq\r\n\r\npasswd jack\r\n\r\n...\r\n\r\n（3）jack创建一个文件，自己可以读写，本组人可以独，其他组没有任何权限\r\n\r\ntouch /vim jack001.txt\r\n\r\nchmod 640 jack001.txt\r\n\r\n（4）jack修改该文件，让其他组人可以读，本组人可以读写\r\n\r\nchmod g+w,o+r jack001.txt\r\n\r\n（5） xh投靠警察，看看是否可以读写\r\n\r\n要先可读写jack的目录 ，不然进不去\r\n\r\nusermod -g police xh\r\n\r\nchmod 6 jack\r\n\r\n\r\n\r\n\r\n\r\n#### \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### ======任务调度======\r\n\r\n#### crontab\r\n\r\ncrontab -r :终止所有任务\r\n\r\ncrontab -l：列出所有任务\r\n\r\nservice crond  restart重启任务\r\n\r\n![image-20200719214921870](C:\\Users\\admin\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200719214921870.png)\r\n\r\n![image-20200719214935424](C:\\Users\\admin\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200719214935424.png)\r\n\r\n![image-20200719214950534](C:\\Users\\admin\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200719214950534.png)\r\n\r\n![image-20200719214844685](C:\\Users\\admin\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200719214844685.png)\r\n\r\n\r\n\r\n\r\n\r\n### ======磁盘分区======\r\n\r\n1分区\r\n\r\n--\r\n\r\n\r\n\r\n\r\n\r\n查看磁盘使用情况\r\n\r\ndf  -lh\r\n\r\n查询指定磁盘： du -ach  --max-dept=1 /home/newDisk\r\n\r\n\r\n\r\n\r\n\r\n### =======软件安装=======\r\n\r\ntar -zxvf  安装包\r\n\r\n#### jdk 安装\r\n\r\n先解压\r\n\r\nJAVA_HOME=/opt/jdk1.8.0_161\r\nPATH=/opt/jdk1.8.0_161/bin:$PATH\r\nexport JAVA_HOME PATH\r\n\r\n\r\n\r\n#### tomcat安装\r\n\r\n解压\r\n\r\n开启服务 ../startup.sh\r\n\r\n外网使用\r\n\r\n\r\n\r\n\r\n\r\nskip_grant_tables\r\n\r\n查看防火墙状态：service iptables status\r\n\r\n编辑防火墙文件打开端口：vim /etc/sysconfig/iptablesvim /etc/sysconfig/iptables\r\n\r\n重启防火墙:service iptables restart', 'https://i.picsum.photos/id/1010/5184/3456.jpg?hmac=7SE0MNAloXpJXDxio2nvoshUx9roGIJ_5pZej6qdxXs', '原创', 0, 0, 0, 0, 1, 1, '2019-03-12 19:13:59', '2019-12-13 19:13:59', 1, 1, 'Linux命令');
INSERT INTO `t_blog` VALUES (37, '测试数据用的', '测试数据用', 'https://i.picsum.photos/id/1013/4256/2832.jpg?hmac=UmYgZfqY_sNtHdug0Gd73bHFyf1VvzFWzPXSr5VTnDA', '翻译', 0, 1, 1, 1, 1, 1, '2020-05-01 19:56:53', '2020-08-15 19:56:53', 4, 1, '测试数据用的');
INSERT INTO `t_blog` VALUES (38, '1', '1', 'https://i.picsum.photos/id/1013/4256/2832.jpg?hmac=UmYgZfqY_sNtHdug0Gd73bHFyf1VvzFWzPXSr5VTnDA', '转载', 0, 0, 0, 0, 1, 1, '2018-12-01 19:57:30', '2020-08-15 19:57:30', 3, 1, '1');
INSERT INTO `t_blog` VALUES (39, '前端学习', '<div class=\"lemma-summary\" label-module=\"lemmaSummary\">\r\n<div class=\"para\" label-module=\"para\">沙奎尔·奥尼尔（Shaquille O\'Neal），1972年3月6日出生于美国<a target=\"_blank\" href=\"/item/%E6%96%B0%E6%B3%BD%E8%A5%BF/5704872\" data-lemmaid=\"5704872\">新泽西</a>内瓦克，前美国职业篮球运动员，司职<a target=\"_blank\" href=\"/item/%E4%B8%AD%E9%94%8B/29560\" data-lemmaid=\"29560\">中锋</a>，小名“沙克”（Shaq），绰号“大鲨鱼”。</div><div class=\"para\" label-module=\"para\">沙奎尔·奥尼尔在<a target=\"_blank\" href=\"/item/1992%E5%B9%B4NBA%E9%80%89%E7%A7%80\">1992年NBA选秀</a>中于第1轮第1位以状元秀的身份被<a target=\"_blank\" href=\"/item/%E5%A5%A5%E5%85%B0%E5%A4%9A%E9%AD%94%E6%9C%AF%E9%98%9F/1322020\" data-lemmaid=\"1322020\">奥兰多魔术队</a>选中，职业生涯曾效力于<a target=\"_blank\" href=\"/item/%E5%A5%A5%E5%85%B0%E5%A4%9A%E9%AD%94%E6%9C%AF%E9%98%9F/1322020\" data-lemmaid=\"1322020\">奥兰多魔术队</a>、<a target=\"_blank\" href=\"/item/%E6%B4%9B%E6%9D%89%E7%9F%B6%E6%B9%96%E4%BA%BA%E9%98%9F/406453\" data-lemmaid=\"406453\">洛杉矶湖人队</a>、<a target=\"_blank\" href=\"/item/%E8%BF%88%E9%98%BF%E5%AF%86%E7%83%AD%E7%81%AB%E9%98%9F/1126166\" data-lemmaid=\"1126166\">迈阿密热火队</a>、<a target=\"_blank\" href=\"/item/%E8%8F%B2%E5%B0%BC%E5%85%8B%E6%96%AF%E5%A4%AA%E9%98%B3%E9%98%9F/1328989\" data-lemmaid=\"1328989\">菲尼克斯太阳队</a>、<a target=\"_blank\" href=\"/item/%E5%85%8B%E9%87%8C%E5%A4%AB%E5%85%B0%E9%AA%91%E5%A3%AB%E9%98%9F/8711057\" data-lemmaid=\"8711057\">克里夫兰骑士队</a>以及<a target=\"_blank\" href=\"/item/%E6%B3%A2%E5%A3%AB%E9%A1%BF%E5%87%AF%E5%B0%94%E7%89%B9%E4%BA%BA%E9%98%9F/609215\" data-lemmaid=\"609215\">波士顿凯尔特人队</a>，新秀赛季当选<a target=\"_blank\" href=\"/item/NBA%E5%B9%B4%E5%BA%A6%E6%9C%80%E4%BD%B3%E6%96%B0%E7%A7%80\">NBA年度最佳新秀</a>，4次夺得<a target=\"_blank\" href=\"/item/NBA%E6%80%BB%E5%86%A0%E5%86%9B\">NBA总冠军</a>，2000年当选NBA常规赛MVP，3次当选<a target=\"_blank\" href=\"/item/NBA%E6%80%BB%E5%86%B3%E8%B5%9B\">NBA总决赛</a>MVP（<a target=\"_blank\" href=\"/item/FMVP\">FMVP</a>），15次入选<a target=\"_blank\" href=\"/item/NBA%E5%85%A8%E6%98%8E%E6%98%9F\">NBA全明星</a>阵容并3次当选<a target=\"_blank\" href=\"/item/NBA%E5%85%A8%E6%98%8E%E6%98%9F\">NBA全明星</a>MVP，8次入选<a target=\"_blank\" href=\"/item/NBA%E6%9C%80%E4%BD%B3%E9%98%B5%E5%AE%B9\">NBA最佳阵容</a>一阵，4次入选<a target=\"_blank\" href=\"/item/NBA%E6%9C%80%E4%BD%B3%E9%98%B5%E5%AE%B9\">NBA最佳阵容</a>二阵，2次入选<a target=\"_blank\" href=\"/item/NBA%E6%9C%80%E4%BD%B3%E9%98%B5%E5%AE%B9\">NBA最佳阵容</a>三阵，3次入选<a target=\"_blank\" href=\"/item/NBA%E6%9C%80%E4%BD%B3%E9%98%B2%E5%AE%88%E9%98%B5%E5%AE%B9\">NBA最佳防守阵容</a>二阵，2次当选<a target=\"_blank\" href=\"/item/NBA%E5%BE%97%E5%88%86%E7%8E%8B\">NBA得分王</a><sup class=\"sup--normal\" data-sup=\"1\" data-ctrmap=\":1,\">\r\n[1]</sup><a class=\"sup-anchor\" name=\"ref_[1]_44322\">&nbsp;</a>\r\n。</div><div class=\"para\" label-module=\"para\">1996年，沙奎尔·奥尼尔入选NBA<a target=\"_blank\" href=\"/item/50%E5%A4%A7%E5%B7%A8%E6%98%9F/6548863\" data-lemmaid=\"6548863\">50大巨星</a><sup class=\"sup--normal\" data-sup=\"2\" data-ctrmap=\":2,\">\r\n[2]</sup><a class=\"sup-anchor\" name=\"ref_[2]_44322\">&nbsp;</a>\r\n。2011年6月2日，“<a target=\"_blank\" href=\"/item/%E5%A4%A7%E9%B2%A8%E9%B1%BC/7602916\" data-lemmaid=\"7602916\">大鲨鱼</a>”沙奎尔·奥尼尔在<a target=\"_blank\" href=\"/item/%E6%8E%A8%E7%89%B9/4596587\" data-lemmaid=\"4596587\">推特</a>上宣布退役。<sup class=\"sup--normal\" data-sup=\"3-6\" data-ctrmap=\":3,:3,:4,:5,:6,\">\r\n[3-6]</sup><a class=\"sup-anchor\" name=\"ref_[3-6]_44322\">&nbsp;</a>\r\n沙奎尔·奥尼尔的NBA生涯场均得到23.7分、10.9个篮板、2.3次盖帽；生涯共得到28596分，13099个篮板球，以及拥有58.2%的投篮命中率，是NBA实力最强的中锋之一<sup class=\"sup--normal\" data-sup=\"1\" data-ctrmap=\":1,\">\r\n[1]</sup><a class=\"sup-anchor\" name=\"ref_[1]_44322\">&nbsp;</a>\r\n。</div><div class=\"para\" label-module=\"para\">2013年4月3日，湖人队在主场迎战小牛队比赛的中场时间，为沙奎尔·奥尼尔的34号球衣举办了球衣退役仪式<sup class=\"sup--normal\" data-sup=\"2\" data-ctrmap=\":2,\">\r\n[2]</sup><a class=\"sup-anchor\" name=\"ref_[2]_44322\">&nbsp;</a>\r\n。2016年4月4日，沙奎尔·奥尼尔正式入选2016年<a target=\"_blank\" href=\"/item/%E5%A5%88%C2%B7%E5%8F%B2%E5%AF%86%E6%96%AF%E7%AF%AE%E7%90%83%E5%90%8D%E4%BA%BA%E7%BA%AA%E5%BF%B5%E5%A0%82/1667563\" data-lemmaid=\"1667563\">奈·史密斯篮球名人纪念堂</a>。<sup class=\"sup--normal\" data-sup=\"7\" data-ctrmap=\":7,\">\r\n[7]</sup><a class=\"sup-anchor\" name=\"ref_[7]_44322\">&nbsp;</a>\r\n同年12月23日，热火主场迎战湖人，在中场休息期间为奥尼尔的32号球衣举办了球衣退役仪式<sup class=\"sup--normal\" data-sup=\"8\" data-ctrmap=\":8,\">\r\n[8]</sup><a class=\"sup-anchor\" name=\"ref_[8]_44322\">&nbsp;</a>\r\n。</div>\r\n</div>', 'https://i.picsum.photos/id/1013/4256/2832.jpg?hmac=UmYgZfqY_sNtHdug0Gd73bHFyf1VvzFWzPXSr5VTnDA', '转载', 0, 1, 1, 1, 1, 1, '2020-08-16 20:22:33', '2020-08-16 20:22:33', 2, 1, 'markdown测试上传图片');
INSERT INTO `t_blog` VALUES (40, '计算机新知识', '# 计算机\r\n	 编程太难了！', 'https://i.picsum.photos/id/1013/4256/2832.jpg?hmac=UmYgZfqY_sNtHdug0Gd73bHFyf1VvzFWzPXSr5VTnDA', '翻译', 0, 1, 0, 1, 1, 1, '2020-08-17 11:17:50', '2020-08-17 11:17:50', 1, 1, '吐槽');

-- ----------------------------
-- Table structure for t_comment
-- ----------------------------
DROP TABLE IF EXISTS `t_comment`;
CREATE TABLE `t_comment`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `nickname` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '评论用户昵称',
  `email` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '邮箱',
  `content` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '评论的内容',
  `avatar` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '头像',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `blog_id` bigint(20) NULL DEFAULT NULL,
  `parent_comment_id` bigint(20) NULL DEFAULT NULL COMMENT '父id',
  `isUser` int(11) NULL DEFAULT NULL COMMENT '是否是博主',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `t_comment_blog`(`blog_id`) USING BTREE,
  INDEX `t_comment_comment`(`parent_comment_id`) USING BTREE,
  CONSTRAINT `t_comment_blog` FOREIGN KEY (`blog_id`) REFERENCES `t_blog` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 19 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of t_comment
-- ----------------------------
INSERT INTO `t_comment` VALUES (3, '一级评论', '847113951', '黑龙江', '/img/avatar.jpg', '2020-08-11 23:47:43', 35, -1, 1);
INSERT INTO `t_comment` VALUES (4, '二级评论', '1139731060', '齐齐哈尔', '/img/avatar.jpg', '2020-08-11 23:48:22', 35, 3, 0);
INSERT INTO `t_comment` VALUES (5, '三级评论', '8888888', '拜泉县', '/img/avatar.jpg', '2020-08-11 23:49:03', 35, 4, 0);
INSERT INTO `t_comment` VALUES (6, '二级评论', '666666666', '哈尔滨', '/img/avatar.jpg', '2020-08-12 10:45:43', 35, 3, 0);
INSERT INTO `t_comment` VALUES (7, '一级评论', '111111111', '吉林', '/img/avatar.jpg', '2020-08-12 11:59:41', 35, -1, 1);
INSERT INTO `t_comment` VALUES (8, '二级评论', '456', '长春', '/img/avatar.jpg', '2020-08-12 12:00:06', 35, 7, 0);
INSERT INTO `t_comment` VALUES (9, '四级评论', '987', '上升乡', '/img/avatar.jpg', '2020-08-12 12:00:06', 35, 5, 0);
INSERT INTO `t_comment` VALUES (10, '北京', 'taishici@163.com', '杨德威', '/img/avatar.jpg', '2020-08-05 18:02:15', 37, -1, 0);
INSERT INTO `t_comment` VALUES (11, '一级评论', 'numberOne@163.com', '辽宁', '/img/avatar.jpg', '2020-08-11 18:02:18', 37, -1, 0);
INSERT INTO `t_comment` VALUES (14, '奥尼尔', 'numberOne@163.com', '评论信息', NULL, '2020-08-16 20:46:14', 39, -1, 0);
INSERT INTO `t_comment` VALUES (15, '小奥尼尔', 'lingyin@163.com', '谢利夫奥尼尔', NULL, '2020-08-16 20:48:53', 39, 14, 0);
INSERT INTO `t_comment` VALUES (16, '安东尼', 'numberOne@163.com', '卡梅隆', NULL, '2020-08-16 20:54:59', 39, 14, 0);
INSERT INTO `t_comment` VALUES (17, '克斯利', 'zk@163.com', '保罗', '/img/avatar.jpg', '2020-08-16 20:58:25', 39, -1, 0);
INSERT INTO `t_comment` VALUES (18, '建造者模式', '847113951@qq.com', '四平', '/img/zy.jpg', '2020-08-17 12:28:53', 35, 7, NULL);

-- ----------------------------
-- Table structure for t_tag
-- ----------------------------
DROP TABLE IF EXISTS `t_tag`;
CREATE TABLE `t_tag`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '标签名称',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 16 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of t_tag
-- ----------------------------
INSERT INTO `t_tag` VALUES (1, 'java');
INSERT INTO `t_tag` VALUES (2, 'html');
INSERT INTO `t_tag` VALUES (3, 'css');
INSERT INTO `t_tag` VALUES (4, 'js');
INSERT INTO `t_tag` VALUES (14, 'oracle');
INSERT INTO `t_tag` VALUES (15, 'mysql');

-- ----------------------------
-- Table structure for t_type
-- ----------------------------
DROP TABLE IF EXISTS `t_type`;
CREATE TABLE `t_type`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '类型的名字',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 22 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of t_type
-- ----------------------------
INSERT INTO `t_type` VALUES (1, '学习笔记');
INSERT INTO `t_type` VALUES (2, '设计模式');
INSERT INTO `t_type` VALUES (3, 'LeetCode题解');
INSERT INTO `t_type` VALUES (4, '插件');
INSERT INTO `t_type` VALUES (21, '数据库');

-- ----------------------------
-- Table structure for t_user
-- ----------------------------
DROP TABLE IF EXISTS `t_user`;
CREATE TABLE `t_user`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `nickname` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '用户名',
  `password` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '密码',
  `email` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '邮箱',
  `avater` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '头像',
  `type` int(11) NULL DEFAULT NULL COMMENT '用户类型 1为管理员 0为普通用户',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `username` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '用户名',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of t_user
-- ----------------------------
INSERT INTO `t_user` VALUES (1, '建造者模式', '6eec9be302319a077552a61235e88679', '847113951@qq.com', '/img/zy.jpg', 1, '2020-08-01 20:09:01', '2020-08-02 20:09:05', 'ydw');

SET FOREIGN_KEY_CHECKS = 1;
